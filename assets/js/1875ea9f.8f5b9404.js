"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2443],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,m=p["".concat(o,".").concat(d)]||p[d]||g[d]||s;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,r=new Array(s);r[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var u=2;u<s;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const s={},r="Signing & Verifying Messages",l={unversionedId:"build-with-sequence/sign-message",id:"build-with-sequence/sign-message",title:"Signing & Verifying Messages",description:"Signing Messages",source:"@site/docs/build-with-sequence/04-sign-message.mdx",sourceDirName:"build-with-sequence",slug:"/build-with-sequence/sign-message",permalink:"/build-with-sequence/sign-message",draft:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/build-with-sequence/04-sign-message.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"sidebar",previous:{title:"Get Wallet Account Address",permalink:"/build-with-sequence/get-address"},next:{title:"Signing & Verifying Transactions",permalink:"/build-with-sequence/sign-transaction"}},o={},u=[{value:"Signing Messages",id:"signing-messages",level:2},{value:"Verifying Message Signatures",id:"verifying-message-signatures",level:2},{value:"Notes on Signature Validation with EIP1271",id:"notes-on-signature-validation-with-eip1271",level:3}],c={toc:u};function g(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"signing--verifying-messages"},"Signing & Verifying Messages"),(0,i.kt)("h2",{id:"signing-messages"},"Signing Messages"),(0,i.kt)("p",null,"Sequence wallets are able to sign arbitrary messages because they conform to a standard defined by EIP-1271."),(0,i.kt)("p",null,"To request a user's signature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const signer = wallet.getSigner()\nconst message = 'Hello World!'\n\nconst signature = await signer.signMessage(message)\nconsole.log(signature)\n")),(0,i.kt)("h2",{id:"verifying-message-signatures"},"Verifying Message Signatures"),(0,i.kt)("admonition",{title:"Sequence is a Smart Contract based account",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"As a Smart Contract-based account, Sequence signatures must be validated with the standard\nEIP1271 method, see ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1271"},"https://eips.ethereum.org/EIPS/eip-1271"))),(0,i.kt)("p",null,"Given a message and signature, you can check if a particular wallet signed that message:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const wallet = sequence.getWallet()\nconst provider = wallet.getProvider()\n\nconst walletAddress = await wallet.getAddress()\nconst chainId = await wallet.getChainId()\n\n// The sequence utils `isValidMessageSignature` method supports validating both \n// EOA and Smart Wallet (EIP1271) signatures with this simple call.\nconst isValid = await sequence.utils.isValidMessageSignature(\n  walletAddress,\n  message,\n  signature,\n  provider,\n  chainId\n)\n\nconsole.log(isValid)\n")),(0,i.kt)("h3",{id:"notes-on-signature-validation-with-eip1271"},"Notes on Signature Validation with EIP1271"),(0,i.kt)("p",null,"Smart Contract-based wallets like Sequence rely on the ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1271"},"EIP1271")," standard for signature validation."),(0,i.kt)("p",null,"The EIP1271 is a single function on a contract defined as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function isValidSignature(\n  bytes32 _hash, \n  bytes memory _signature\n) public view returns (bytes4 magicValue)\n")),(0,i.kt)("p",null,"The first ",(0,i.kt)("inlineCode",{parentName:"p"},"_hash")," argument accepts the hash of the message digest, and the second argument ",(0,i.kt)("inlineCode",{parentName:"p"},"_signature"),"\nis the signed payload returned by the wallet upon signing. "),(0,i.kt)("p",null,"For Javascript/Typescript signature verification, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"0xsequence")," utility functions like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { 0xsequence } from '0xsequence'\n\nconst isValid = await sequence.utils.isValidSignature(\n  walletAddress,\n  digest,\n  signature,\n  provider,\n  chainId\n)\n\nconsole.log(isValid) // returns true/false\n")),(0,i.kt)("p",null,"Alternatively you can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"sequence.utils.isValidMessageSignature")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"sequence.utils.isValidTypedDataSignature"),"\nwhich are just syntactic sugar for ",(0,i.kt)("inlineCode",{parentName:"p"},"sequence.utils.isValidSignature"),"."),(0,i.kt)("p",null,"All of the methods above are designed to work in a Web Browser or nodejs. As well, for convenience\nthe signature validation fucntions above support verifying EOA or Smart Wallet signatures. This allows you\nto use a single code path in your Dapp to verify any kind of signature and support multiple wallets at the same\ntime, like Metamask, Sequence, WalletConnect, Argent, Rainbow, etc. -- all Ethereum compatible wallets, EOA\nor Smart Wallets, will ",(0,i.kt)("em",{parentName:"p"},"just work"),"."),(0,i.kt)("p",null,"For Go support see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/0xsequence/go-sequence"},"go-sequence"),"."))}g.isMDXComponent=!0}}]);