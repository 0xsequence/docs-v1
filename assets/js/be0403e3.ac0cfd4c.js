"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[9773],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=u(n),g=r,d=p["".concat(s,".").concat(g)]||p[g]||m[g]||c;return n?o.createElement(d,i(i({ref:t},l),{},{components:n})):o.createElement(d,i({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,i=new Array(c);i[0]=g;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:r,i[1]=a;for(var u=2;u<c;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const c={sidebar_label:"Custom Connectors"},i="Custom Connectors in Sequence Kit",a={unversionedId:"kit/custom-connectors",id:"kit/custom-connectors",title:"Custom Connectors in Sequence Kit",description:"Sequence Kit provides official connectors via the @0xsequence/kit-connectors package. However, you can also integrate custom connectors with Sequence Kit to support additional wallets. This guide will walk you through creating and using custom connectors.",source:"@site/docs/21-kit/05-custom-connectors.mdx",sourceDirName:"21-kit",slug:"/kit/custom-connectors",permalink:"/kit/custom-connectors",draft:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/21-kit/05-custom-connectors.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Custom Connectors"},sidebar:"sidebar",previous:{title:"Checkout",permalink:"/kit/checkout"},next:{title:"Community & Support",permalink:"/support"}},s={},u=[{value:"Creating a Custom Connector",id:"creating-a-custom-connector",level:2}],l={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-connectors-in-sequence-kit"},"Custom Connectors in Sequence Kit"),(0,r.kt)("p",null,"Sequence Kit provides official connectors via the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/0xsequence/kit/tree/master/packages/connectors"},"@0xsequence/kit-connectors")," package. However, you can also integrate custom connectors with Sequence Kit to support additional wallets. This guide will walk you through creating and using custom connectors."),(0,r.kt)("h2",{id:"creating-a-custom-connector"},"Creating a Custom Connector"),(0,r.kt)("p",null,"To create a custom connector, you can use an existing connector as a basis. For example, the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/0xsequence/kit/blob/master/packages/connectors/src/connectors/metamask/metamask.ts"},"Metamask Connector")," is a good starting point. Here's an example of how to create a custom connector:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export const myCustomConnector = ({ chains }: MyCustomConnectorOptions) => ({\n  id: 'my-custom-connector',\n  name: 'My Custom Connector',\n  logoDark: MyCustomLogoDark,\n  logoLight: MyCustomLogoLight,\n  createConnector: () => {\n    const connector = new MyCustomConnector({\n      chains,\n      // Customize connector options here\n    });\n    return connector;\n  },\n});\n")),(0,r.kt)("p",null,"Make sure to provide a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," for your connector to avoid conflicts with other connectors. You can also customize fields such as ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"logoDark"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"logoLight")," to control how the connector appears in Sequence Kit."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"createConnector")," function should return an initialized connector. Sequence Kit connectors are wrappers of Wagmi connectors, so you can use an official Wagmi connector if available, or create your own if needed."),(0,r.kt)("p",null,"For more details on creating custom connectors, refer to ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/examples/custom-connector"},"Wagmi's guide on Custom Connectors"),"."),(0,r.kt)("h1",{id:"using-custom-connectors"},"Using Custom Connectors"),(0,r.kt)("p",null,"When using custom connectors, you can't rely on the ",(0,r.kt)("inlineCode",{parentName:"p"},"getDefaultConnectors")," utility function. Instead, you need to pass custom configurations to Sequence Kit."),(0,r.kt)("p",null,"First, create a list of connectors, including your custom connector, and provide it to the Wagmi configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { getKitConnectWallets } from '@0xsequence/kit';\n\nconst connectors = getKitConnectWallets([\n  google({\n    chains,\n    options: {\n      defaultNetwork: 137,\n    },\n  }),\n  // ... other connectors\n  myCustomConnector({ chains }),\n]);\n\nconst config = createConfig({\n  autoConnect: true,\n  publicClient,\n  webSocketPublicClient,\n  connectors,\n});\n")),(0,r.kt)("p",null,"Next, use your custom connector by specifying its ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," in either the ",(0,r.kt)("inlineCode",{parentName:"p"},"authOptions")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"miniAuthOptions")," field of the Sequence Kit configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const kitConfig = {\n  signIn: {\n    miniAuthOptions: ['google', 'facebook'],\n    authOptions: ['metamask', 'my-custom-connector'],\n  }\n};\n\nreturn (\n  <WagmiConfig config={wagmiConfig}>\n    <KitProvider config={kitConfig}>\n      <App />\n    </KitProvider>\n  </WagmiConfig>\n);\n")),(0,r.kt)("h1",{id:"share-your-custom-connectors"},"Share Your Custom Connectors"),(0,r.kt)("p",null,"Feel free to contribute your custom connectors by creating a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/0xsequence/kit/pulls"},"pull request"),". This way, others can benefit from your work and enjoy seamless integration with Sequence Kit."),(0,r.kt)("p",null,"Share the love \u2764\ufe0f by expanding the ecosystem of custom connectors!"))}p.isMDXComponent=!0}}]);