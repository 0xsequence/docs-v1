"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[3667],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return a?n.createElement(h,i(i({ref:t},d),{},{components:a})):n.createElement(h,i({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(6010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(7462),r=a(7294),o=a(6010),i=a(2466),s=a(6550),l=a(1980),c=a(7392),d=a(12);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function p(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??u(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function k(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=p(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[l,c]=h({queryString:a,groupId:n}),[u,k]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,d.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),f=(()=>{const e=l??u;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),k(e)}),[c,k,o]),tabValues:o}}var f=a(2389);const b="tabList__CuJ",y="tabItem_LNqP";function v(e){let{className:t,block:a,selectedValue:s,selectValue:l,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),p=e=>{const t=e.currentTarget,a=d.indexOf(t),n=c[a].value;n!==s&&(u(t),l(n))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},i,{className:(0,o.Z)("tabs__item",y,i?.className,{"tabs__item--active":s===t})}),a??t)})))}function g(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function C(e){const t=k(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",b)},r.createElement(v,(0,n.Z)({},e,t)),r.createElement(g,(0,n.Z)({},e,t)))}function N(e){const t=(0,f.Z)();return r.createElement(C,(0,n.Z)({key:String(t)},e))}},5895:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),o=a(4866),i=a(5162);const s={sidebar_label:"Token metadata"},l="Token Metadata",c={unversionedId:"metadata/token-metadata",id:"metadata/token-metadata",title:"Token Metadata",description:"Sequence provides a metadata service for fetching token metadata for any ERC721 or ERC1155 contract, on any EVM chain.",source:"@site/docs/05-metadata/03-token-metadata.mdx",sourceDirName:"05-metadata",slug:"/metadata/token-metadata",permalink:"/metadata/token-metadata",draft:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/05-metadata/03-token-metadata.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Token metadata"},sidebar:"sidebar",previous:{title:"Installation",permalink:"/metadata/installation"},next:{title:"Contract metadata",permalink:"/metadata/contract-metadata"}},d={},u=[{value:"Fetch token metadata for any ERC721 or ERC1155 contract",id:"fetch-token-metadata-for-any-erc721-or-erc1155-contract",level:2},{value:"Token Metadata Standards",id:"token-metadata-standards",level:2},{value:"Metadata Standards",id:"metadata-standards",level:2},{value:"ERC721",id:"erc721",level:3},{value:"ERC1155",id:"erc1155",level:3},{value:"Attributes vs Properties",id:"attributes-vs-properties",level:3},{value:"ERC20",id:"erc20",level:3}],p={toc:u};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"token-metadata"},"Token Metadata"),(0,r.kt)("p",null,"Sequence provides a metadata service for fetching token metadata for any ERC721 or ERC1155 contract, on ",(0,r.kt)("a",{parentName:"p",href:"/multi-chain-support"},"any EVM chain"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/metadata/token-metadata#fetch-token-metadata-for-any-erc721-or-erc1155-contract"},"Learn how to query token metadata directly for any contract")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/metadata/token-metadata#token-metadata-standards"},"Learn about token metadata standards and formats for ERC721 and ERC1155 tokens"))),(0,r.kt)("admonition",{title:"PRO TIP: Sequence Indexer also supports token metadata",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When using the ",(0,r.kt)("a",{parentName:"p",href:"/indexer"},"Sequence Indexer"),", pass ",(0,r.kt)("inlineCode",{parentName:"p"},'"includeMetadata": true')," to your request to\nquery token metadata for any ERC721 or ERC1155 contract. See below how to fetch\ntoken metadata directly.")),(0,r.kt)("h2",{id:"fetch-token-metadata-for-any-erc721-or-erc1155-contract"},"Fetch token metadata for any ERC721 or ERC1155 contract"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Sequence Metadata ",(0,r.kt)("inlineCode",{parentName:"em"},"GetTokenMetadata")," Method:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Request: POST /rpc/Metadata/GetTokenMetadata"),(0,r.kt)("li",{parentName:"ul"},"Content-Type: application/json"),(0,r.kt)("li",{parentName:"ul"},"Body (in JSON):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chainID"),' (string) -- the chain id, as a name or number (ie. "1" or "mainnet", "137" or "polygon", etc.)'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contractAddress")," (string) -- the contract address"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tokenIDs")," (array of strings) -- array of strings containing token ids to fetch metadata")))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: ",(0,r.kt)("inlineCode",{parentName:"strong"},"GetTokenMetadata")," of some Skyweaver tokens on Polygon")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"curl",label:"curl",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash wrap",metastring:"class=wrap"},'curl -X POST -H "Content-Type: application/json" https://metadata.sequence.app/rpc/Metadata/GetTokenMetadata -d \'{ "chainID": "polygon", "contractAddress": "0x631998e91476DA5B870D741192fc5Cbc55F5a52E", "tokenIDs": ["65537", "65538", "65539"] }\'\n'))),(0,r.kt)(i.Z,{value:"js",label:"Javascript / Typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Works in both a Webapp (browser) or Node.js:\nimport { SequenceMetadataClient } from '@0xsequence/metadata'\n\nconst metadataClient = new SequenceMetadataClient()\n\nconst tokenMetadata = await metadataClient.getTokenMetadata({\n  chainID: 'polygon',\n  contractAddress: '0x631998e91476DA5B870D741192fc5Cbc55F5a52E',\n  tokenIDs: ['65537', '65538', '65539']\n})\n\nconsole.log('Skyweaver metadata for some tokens:', tokenMetadata)\n"))),(0,r.kt)(i.Z,{value:"other",label:"Other",mdxType:"TabItem"},(0,r.kt)("p",null,"Please ",(0,r.kt)("a",{parentName:"p",href:"/support"},"contact our team")," for assistance with integrations to another target."))),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"token-metadata-standards"},"Token Metadata Standards"),(0,r.kt)("p",null,"Popular token standards like ",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-721"},"EIP721")," and ",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1155"},"EIP1155")," both\nhave similar metadata standard formats with some subtle differences. In addition to the standards, we've seen in practice that projects\noften slightly deviate from the standards but are sensical, easy to parse and well supported in the ecosystem, include the Sequence Metadata service.\nBelow we describe the standards and common practices across projects to help demystify how to format your token metadata for your projects."),(0,r.kt)("h2",{id:"metadata-standards"},"Metadata Standards"),(0,r.kt)("h3",{id:"erc721"},"ERC721"),(0,r.kt)("p",null,"ERC721 token contracts contain a method on the contract called ",(0,r.kt)("inlineCode",{parentName:"p"},"tokenURI(uint256) string"),". When querying the ",(0,r.kt)("inlineCode",{parentName:"p"},"tokenURI")," method on the contract, it will return a URI which contains additional metadata for that asset."),(0,r.kt)("p",null,"See EIP for specific details: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md"},"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md")),(0,r.kt)("p",null,"Here is an example Bored Ape (token id 9):\n",(0,r.kt)("a",{parentName:"p",href:"https://metadata.sequence.app/tokens/mainnet/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d/9"},"https://metadata.sequence.app/tokens/mainnet/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d/9")),(0,r.kt)("p",null,"response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "tokenId": "9",\n  "contractAddress": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",\n  "name": "",\n  "description": "",\n  "image": "https://ipfs.sequence.info/ipfs/QmUQgKka8EW7exiUHnMwZ4UoXA11wV7NFjHAogVAbasSYy",\n  "decimals": 0,\n  "properties": null,\n  "attributes": [\n    {\n      "trait_type": "Earring",\n      "value": "Silver Stud"\n    },\n    {\n      "trait_type": "Eyes",\n      "value": "Sleepy"\n    },\n    {\n      "trait_type": "Mouth",\n      "value": "Small Grin"\n    },\n    {\n      "trait_type": "Fur",\n      "value": "Brown"\n    },\n    {\n      "trait_type": "Hat",\n      "value": "Seaman\'s Hat"\n    },\n    {\n      "trait_type": "Clothes",\n      "value": "Stunt Jacket"\n    },\n    {\n      "trait_type": "Background",\n      "value": "Purple"\n    }\n  ]\n}\n')),(0,r.kt)("p",null,'In the case of this Bored Ape, it appears there is no name or description set,\nbut they do have "attributes" as an array of ',(0,r.kt)("inlineCode",{parentName:"p"},'{ "trait_type": string, "value: string }'),"."),(0,r.kt)("p",null,"Additionally, see OpenSea for more information: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.opensea.io/docs/metadata-standards"},"https://docs.opensea.io/docs/metadata-standards")),(0,r.kt)("p",null,'Note that OpenSea technically breaks the ERC1155 standard by suggesting to use "attributes", where in fact,\nthe ERC1155 calls uses the field name "properties" instead of "attributes", see\n',(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema"},"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema")," (read section below).\nHowever this is completely okay and mixed use of properties / attributes is compatible in practice.\nOn Sequence Metadata, we support both structures for token contracts which use either format for their ",(0,r.kt)("a",{parentName:"p",href:"/metadata/token-metadata#attributes-vs-properties"},"properties/attributes"),"."),(0,r.kt)("p",null,"Another example is from Neon District: ",(0,r.kt)("a",{parentName:"p",href:"https://metadata.sequence.app/tokens/polygon/0x7227e371540CF7b8e512544Ba6871472031F3335/158456331411102687640546264635"},"https://metadata.sequence.app/tokens/polygon/0x7227e371540CF7b8e512544Ba6871472031F3335/158456331411102687640546264635")),(0,r.kt)("h3",{id:"erc1155"},"ERC1155"),(0,r.kt)("p",null,"ERC1155 token contracts contain a method on the contract called ",(0,r.kt)("inlineCode",{parentName:"p"},"uri(uint256) string"),". When querying the ",(0,r.kt)("inlineCode",{parentName:"p"},"uri")," method on the\ncontract, it will return a URI which contains additional metadata for that asset."),(0,r.kt)("p",null,"See EIP for specific details: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema"},"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema")),(0,r.kt)("p",null,"Here is an example Skyweaver card (token id 65548):\n",(0,r.kt)("a",{parentName:"p",href:"https://metadata.sequence.app/tokens/polygon/0x27A11C1563a5dDa238379B95c91B3AbBaD9C0cf6/65548"},"https://metadata.sequence.app/tokens/polygon/0x27A11C1563a5dDa238379B95c91B3AbBaD9C0cf6/65548")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "tokenId": "65548",\n  "contractAddress": "0x27a11c1563a5dda238379b95c91b3abbad9c0cf6",\n  "name": "Weighted Die (Silver)",\n  "description": "Give +1/+1, armor, and guard to a random ally unit, six times.\\n\\n\\"I will not bow to fate. If the dice fall against me, I\'ll cut off the hand that cast them.\\"\\n -Horik",\n  "image": "https://assets.skyweaver.net/LV7xNcQh/webapp/cards/full-cards/6x/12-silver.png",\n  "decimals": 2,\n  "properties": {\n    "artists": {\n      "name": "Artist",\n      "value": [\n        {\n          "id": "xavi",\n          "name": "Henrique Xavier",\n          "url": "https://www.artstation.com/kitexavier"\n        }\n      ]\n    },\n    "baseCardId": 12,\n    "cardType": "Spell",\n    "element": "Metal",\n    "mana": 8,\n    "prism": "Strength",\n    "type": "Silver"\n  },\n  "attributes": null\n}\n')),(0,r.kt)("p",null,"As you can see, Skyweaver an ERC1155 token's metadata uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," object, which is an object/dictionary type of arbitrary data."),(0,r.kt)("h3",{id:"attributes-vs-properties"},"Attributes vs Properties"),(0,r.kt)("p",null,"As you can see, the standard format of token metadata contains both ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"properties"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes")," field is an array of\nobjects. The ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," field is an object/dictionary of arbitrary data. In technical terms, the ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes")," type is defined as\n",(0,r.kt)("inlineCode",{parentName:"p"},"[]map<string,any>")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," type is defined as ",(0,r.kt)("inlineCode",{parentName:"p"},"map<string,any>"),"."),(0,r.kt)("p",null,"In practice, we've seen that many projects use both ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," to store the same data, and in some cases, they use\n",(0,r.kt)("inlineCode",{parentName:"p"},"attributes")," to store data that should be in ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," and vice versa. Sometimes project use both fields, and this is completely fine\nin practice, as marketplaces and services will parse both areas."),(0,r.kt)("p",null,"Finally, if you are looking to extend the metadata format to suit your project, we recommend to utilize either or both the ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," fields for either ERC721 or ERC1155."),(0,r.kt)("h3",{id:"erc20"},"ERC20"),(0,r.kt)("p",null,"Finally, a note on ERC20 tokens. ERC20 tokens are just a single token, so they themselves do not have a token ID, but\nare represented entirely by their contract address. We can infer some information about the token by querying the contract\nmethods such as ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"decimals"),". Additionally, ERC20 tokens can take advantage of the ",(0,r.kt)("inlineCode",{parentName:"p"},"contractURI")," extension used\nby OpenSea and described in more detail in our ",(0,r.kt)("a",{parentName:"p",href:"/metadata/contract-metadata"},"Contract metadata")," section."))}m.isMDXComponent=!0}}]);