"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[66],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},236:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={},o="Using Sequence on testnets",i={unversionedId:"wallet/guides/using-testnets",id:"wallet/guides/using-testnets",title:"Using Sequence on testnets",description:"By default, all Sequence wallets are able to use all supported networks (including testnets!). Dapps can interact with any of these testnets like they would with any other network.",source:"@site/docs/03-wallet/04-guides/11-using-testnets.mdx",sourceDirName:"03-wallet/04-guides",slug:"/wallet/guides/using-testnets",permalink:"/wallet/guides/using-testnets",draft:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/03-wallet/04-guides/11-using-testnets.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"sidebar",previous:{title:"Building Backends with Sequence",permalink:"/wallet/guides/building-backends"},next:{title:"Wallet Connectors",permalink:"/wallet/connectors/overview"}},l={},c=[{value:"Supported test networks",id:"supported-test-networks",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-sequence-on-testnets"},"Using Sequence on testnets"),(0,a.kt)("p",null,"By default, all Sequence wallets are able to use all supported networks (including testnets!). Dapps can interact with any of these testnets like they would with any other network."),(0,a.kt)("p",null,"For example, if a dapp only wants to interact with the Mumbai testnet, they can do so by specifying the network when ",(0,a.kt)("inlineCode",{parentName:"p"},"initWallet")," is called:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { sequence } from '0xsequence'\n\nconst wallet = sequence.initWallet({ defaultNetwork: 'mumbai' })\n")),(0,a.kt)("p",null,"Most methods also support a ",(0,a.kt)("inlineCode",{parentName:"p"},"chainId")," parameter, which can be used to specify the network to interact with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const signer = wallet.getSigner()\n\nconst transaction = {\n  to: '0x6d52be8194216fF4E7685D285728C8dF9050b2CC',\n  value: ethers.utils.parseEther('0.1')\n}\n\nconst response = await signer.sendTransaction(transaction, { chainId: 'mumbai' })\n")),(0,a.kt)("h2",{id:"supported-test-networks"},"Supported test networks"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Goerli"),(0,a.kt)("li",{parentName:"ul"},"Mumbai"),(0,a.kt)("li",{parentName:"ul"},"BSC Testnet")))}d.isMDXComponent=!0}}]);