"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2443],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),d=i,m=p["".concat(l,".").concat(d)]||p[d]||g[d]||s;return t?a.createElement(m,r(r({ref:n},c),{},{components:t})):a.createElement(m,r({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,r=new Array(s);r[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var u=2;u<s;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2880:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return g}});var a=t(7462),i=t(3366),s=(t(7294),t(3905)),r=["components"],o={},l="Signing & Verifying Messages",u={unversionedId:"build-with-sequence/sign-message",id:"build-with-sequence/sign-message",title:"Signing & Verifying Messages",description:"Signing Messages",source:"@site/docs/build-with-sequence/04-sign-message.mdx",sourceDirName:"build-with-sequence",slug:"/build-with-sequence/sign-message",permalink:"/build-with-sequence/sign-message",editUrl:"https://github.com/0xsequence/docs/edit/master/docs/build-with-sequence/04-sign-message.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"sidebar",previous:{title:"Get Wallet Account Address",permalink:"/build-with-sequence/get-address"},next:{title:"Signing & Verifying Transactions",permalink:"/build-with-sequence/sign-transaction"}},c={},g=[{value:"Signing Messages",id:"signing-messages",level:2},{value:"Verifying Message Signatures",id:"verifying-message-signatures",level:2},{value:"Notes on Signature Validation with EIP1271",id:"notes-on-signature-validation-with-eip1271",level:3}],p={toc:g};function d(e){var n=e.components,t=(0,i.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"signing--verifying-messages"},"Signing & Verifying Messages"),(0,s.kt)("h2",{id:"signing-messages"},"Signing Messages"),(0,s.kt)("p",null,"Sequence wallets are able to sign arbitrary messages because they conform to a standard defined by EIP-1271."),(0,s.kt)("p",null,"To request a user's signature:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const signer = wallet.getSigner()\nconst message = 'Hello World!'\n\nconst signature = await signer.signMessage(message)\nconsole.log(signature)\n")),(0,s.kt)("h2",{id:"verifying-message-signatures"},"Verifying Message Signatures"),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Sequence is a Smart Contract based account")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"As a Smart Contract-based account, Sequence signatures must be validated with the standard\nEIP1271 method, see ",(0,s.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1271"},"https://eips.ethereum.org/EIPS/eip-1271")))),(0,s.kt)("p",null,"Given a message and signature, you can check if a particular wallet signed that message:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const wallet = sequence.getWallet()\nconst provider = wallet.getProvider()\n\nconst walletAddress = await wallet.getAddress()\nconst chainId = await wallet.getChainId()\n\n// The sequence utils `isValidMessageSignature` method supports validating both \n// EOA and Smart Wallet (EIP1271) signatures with this simple call.\nconst isValid = await sequence.utils.isValidMessageSignature(\n  walletAddress,\n  message,\n  signature,\n  provider,\n  chainId\n)\n\nconsole.log(isValid)\n")),(0,s.kt)("h3",{id:"notes-on-signature-validation-with-eip1271"},"Notes on Signature Validation with EIP1271"),(0,s.kt)("p",null,"Smart Contract-based wallets like Sequence rely on the ",(0,s.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1271"},"EIP1271")," standard for signature validation."),(0,s.kt)("p",null,"The EIP1271 is a single function on a contract defined as:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"function isValidSignature(\n  bytes32 _hash, \n  bytes memory _signature\n) public view returns (bytes4 magicValue)\n")),(0,s.kt)("p",null,"The first ",(0,s.kt)("inlineCode",{parentName:"p"},"_hash")," argument accepts the hash of the message digest, and the second argument ",(0,s.kt)("inlineCode",{parentName:"p"},"_signature"),"\nis the signed payload returned by the wallet upon signing. "),(0,s.kt)("p",null,"For Javascript/Typescript signature verification, you can use ",(0,s.kt)("inlineCode",{parentName:"p"},"0xsequence")," utility functions like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { 0xsequence } from '0xsequence'\n\nconst isValid = await sequence.utils.isValidSignature(\n  walletAddress,\n  digest,\n  signature,\n  provider,\n  chainId\n)\n\nconsole.log(isValid) // returns true/false\n")),(0,s.kt)("p",null,"Alternatively you can also use ",(0,s.kt)("inlineCode",{parentName:"p"},"sequence.utils.isValidMessageSignature")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"sequence.utils.isValidTypedDataSignature"),"\nwhich are just syntactic sugar for ",(0,s.kt)("inlineCode",{parentName:"p"},"sequence.utils.isValidSignature"),"."),(0,s.kt)("p",null,"All of the methods above are designed to work in a Web Browser or nodejs. As well, for convenience\nthe signature validation fucntions above support verifying EOA or Smart Wallet signatures. This allows you\nto use a single code path in your Dapp to verify any kind of signature and support multiple wallets at the same\ntime, like Metamask, Sequence, WalletConnect, Argent, Rainbow, etc. -- all Ethereum compatible wallets, EOA\nor Smart Wallets, will ",(0,s.kt)("em",{parentName:"p"},"just work"),"."),(0,s.kt)("p",null,"For Go support see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/0xsequence/go-sequence"},"go-sequence"),"."))}d.isMDXComponent=!0}}]);