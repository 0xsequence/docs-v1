"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[5753],{4553:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(1527),s=t(7279);const o={slug:"/relayer/mint-collectibles-serverless"},i="Mint Collectibles Using a Gasless Serverless Relayer",l={id:"relayer/mint-collectibles-serverless",title:"Mint Collectibles Using a Gasless Serverless Relayer",description:"Time to complete: 20-30 minutes",source:"@site/docs/300-relayer/03-mint-collectibles-serverless.mdx",sourceDirName:"300-relayer",slug:"/relayer/mint-collectibles-serverless",permalink:"/relayer/mint-collectibles-serverless",draft:!1,unlisted:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/300-relayer/03-mint-collectibles-serverless.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/relayer/mint-collectibles-serverless"},sidebar:"sidebar",previous:{title:"Building a Relaying Server",permalink:"/relayer/building-relaying-server"},next:{title:"Sequence Games SDK",permalink:"/games-sdk"}},a={},c=[{value:"1. Setup Cloudflare environment with wrangler cli and deploy a test",id:"1-setup-cloudflare-environment-with-wrangler-cli-and-deploy-a-test",level:2},{value:"Deploy Test",id:"deploy-test",level:4},{value:"2. Deploy, Sponsor and Update Metadata for an ERC1155 Contract with Builder",id:"2-deploy-sponsor-and-update-metadata-for-an-erc1155-contract-with-builder",level:2},{value:"Update metadata",id:"update-metadata",level:4},{value:"Contract sponsoring",id:"contract-sponsoring",level:4},{value:"3. Use EthAuthProof to prevent EOA DDoS",id:"3-use-ethauthproof-to-prevent-eoa-ddos",level:2},{value:"Add cloudflare environment variables",id:"add-cloudflare-environment-variables",level:4},{value:"Implement window object in wrangler template",id:"implement-window-object-in-wrangler-template",level:4},{value:"Testing the deploy",id:"testing-the-deploy",level:4},{value:"4. Mint a collectible to wallet",id:"4-mint-a-collectible-to-wallet",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"mint-collectibles-using-a-gasless-serverless-relayer",children:"Mint Collectibles Using a Gasless Serverless Relayer"}),"\n",(0,r.jsx)(n.p,{children:"Time to complete: 20-30 minutes"}),"\n",(0,r.jsxs)(n.p,{children:["The Sequence Relayer can be implemented on a serverless ",(0,r.jsx)(n.a,{href:"https://cloudflare.com/",children:"Cloudflare"})," worker so a game or app user interaction is seamless without a confirmation signature or gas payment. You'll also benefit from not having to be worried about transaction speed, throughput and re-orgs by the relayer, and experience automatic scaling with Cloudflare."]}),"\n",(0,r.jsx)(n.p,{children:"The following steps will guide you through how to build your hosted minter API in 4 steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/relayer/mint-collectibles-serverless#1-setup-cloudflare-environment-with-wrangler-cli--deploy-a-test",children:"Setup Cloudflare environment with wrangler cli and deploy a test"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/relayer/mint-collectibles-serverless#2-deploy-sponsor-and-update-metadata-for-an-erc1155-contract-with-builder",children:"Deploy, sponsor and update Metadata for an ERC1155 contract with Builder"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"mint-collectibles-serverless#3-use-ethauthproof-to-prevent-eoa-ddos",children:"Use EthAuthProof to prevent EOA DDoS"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"mint-collectibles-serverless#4-mint-a-collectible-to-wallet",children:"Mint a collectible to wallet"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The result, a secure API with the following specs:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"HTTPS GET: returns blockNumber"}),"\n",(0,r.jsx)(n.li,{children:"HTTPS POST(proof, address): mints a collectible & returns transaction hash"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Difficulty",type:"info",children:(0,r.jsx)(n.p,{children:"You need basic knowledge of wrangler cli, npm, and Sequence Builder in order to complete this implementation."})}),"\n",(0,r.jsx)(n.h2,{id:"1-setup-cloudflare-environment-with-wrangler-cli-and-deploy-a-test",children:"1. Setup Cloudflare environment with wrangler cli and deploy a test"}),"\n",(0,r.jsxs)(n.p,{children:["In order to create the project from scratch, first create a project with ",(0,r.jsx)(n.code,{children:"mkdir"}),", ",(0,r.jsx)(n.code,{children:"cd"})," into the project, and run ",(0,r.jsx)(n.code,{children:"pnpm init"})," to create a ",(0,r.jsx)(n.code,{children:"package.json"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Next, make sure wrangler cli is installed in your project and set the ",(0,r.jsx)(n.code,{children:"wrangler"})," keyword as an alias in your local bash session."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"pnpm install wrangler --save-dev\nalias wrangler='./node_modules/.bin/wrangler'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create an account on the ",(0,r.jsx)(n.a,{href:"https://cloudflare.com/",children:"Cloudflare site"})," and perform a login step to login to your Cloudflare dashboard to connect the Cloudflare platform to your local development environment."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"wrangler login\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Once logged in, initialize the project in the directory by accepting one of the randomly generated project folder names provided that you like, and follow the prompts to initialize your git tracked typescript ",(0,r.jsx)(n.code,{children:'"Hello World" Worker'})," application."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"wrangler init\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To complete this step, you should press enter 4 times after ",(0,r.jsx)(n.code,{children:"wrangler init"})," with the last step answered as ",(0,r.jsx)(n.code,{children:"No"})," to decline deployment."]}),"\n",(0,r.jsx)(n.p,{children:"This will clone down a starter repository that can be used to deploy code to the cloud."}),"\n",(0,r.jsx)(n.admonition,{title:"Local API Testing",type:"info",children:(0,r.jsxs)(n.p,{children:["At any point in the guide, you can use the ",(0,r.jsx)(n.code,{children:"wrangler dev"})," command in the project folder for local testing"]})}),"\n",(0,r.jsx)(n.h4,{id:"deploy-test",children:"Deploy Test"}),"\n",(0,r.jsxs)(n.p,{children:["Finally, ",(0,r.jsx)(n.code,{children:"cd"})," into the randomly generated project folder, and perform a ",(0,r.jsx)(n.code,{children:"wrangler deploy"})," command."]}),"\n",(0,r.jsxs)(n.p,{children:["This should print a URL, which you can enter in the browser the URL ",(0,r.jsx)(n.code,{children:"https://<app>.<account>.workers.dev"})," to view the ",(0,r.jsx)(n.code,{children:"Hello World!"})," result."]}),"\n",(0,r.jsx)(n.h2,{id:"2-deploy-sponsor-and-update-metadata-for-an-erc1155-contract-with-builder",children:"2. Deploy, Sponsor and Update Metadata for an ERC1155 Contract with Builder"}),"\n",(0,r.jsxs)(n.p,{children:["First, follow ",(0,r.jsx)(n.a,{href:"/guides/deploy-an-item-collection-contract",children:"this guide"})," to deploy a contract."]}),"\n",(0,r.jsx)(n.p,{children:"Then, one must update the role access of the contract in the Builder to only receive requests from the minter wallet address, which can be done in 2 steps."}),"\n",(0,r.jsxs)(n.p,{children:["You can do this in Sequence Builder by providing ",(0,r.jsx)(n.code,{children:"minter permission"})," to your ",(0,r.jsx)(n.code,{children:"Sequence Wallet Relayer Address"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"In order to know what the relayer address you are working with is, one must first either:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Have one generated for you using this ",(0,r.jsx)(n.a,{href:"https://73eql-hyaaa-aaaad-qf5bq-cai.ic.fleek.co/",children:"dapp"})]}),"\n",(0,r.jsx)(n.li,{children:"Or, you can print locally the account address produced from an EOA wallet private key using the following code snippet:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Session } from '@0xsequence/auth'\nimport { ethers } from 'ethers';\n\n(async () => {\n\n\t// Generate a new EOA\n\t// const wallet = ethers.Wallet.createRandom()\n  \t// const privateKey = wallet.privateKey\n\n\t// Or, use an existing EOA private key\n\tconst privateKey = ''\n\tconst provider = new ethers.providers.JsonRpcProvider('https://nodes.sequence.app/mainnet')\n\n\t// Create your server EOA\n\tconst walletEOA = new ethers.Wallet(privateKey, provider)\n\n\t// Open a Sequence session, this will find or create\n\t// a Sequence wallet controlled by your server EOA\n\tconst session = await Session.singleSigner({\n\t\tsigner: walletEOA,\n\t\tprojectAccessKey: 'access_key'\n\t})\n\n\tconst signer = session.account.getSigner(1)\n\tconsole.log(`Your relayer wallet address: ${signer.account.address}`)\n\n})()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To do so, open your project, navigate to the ",(0,r.jsx)(n.code,{children:"Contracts"})," page, select your ",(0,r.jsx)(n.code,{children:"Linked contracts"})," and under ",(0,r.jsx)(n.code,{children:"Write Contract"})," tab expand the ",(0,r.jsx)(n.code,{children:"grantRole"})," method."]}),"\n",(0,r.jsx)(n.p,{children:"Complete with the following details:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bytes32 role"}),": ",(0,r.jsx)(n.code,{children:"0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"address account"}),": ",(0,r.jsx)(n.code,{children:"<Generated Sequence Relayer Wallet Address>"})]}),"\n",(0,r.jsx)("img",{src:"/img/relayer/grant_role.png"}),"\n",(0,r.jsxs)(n.p,{children:["Where the ",(0,r.jsx)(n.code,{children:"role"})," string inputted is the result of ",(0,r.jsx)(n.code,{children:'keccak256("MINTER_ROLE")'})," in solidity or ",(0,r.jsx)(n.code,{children:'ethers.utils.keccak256(ethers.utils.toUtf8Bytes("MINTER_ROLE"))'})," in javascript"]}),"\n",(0,r.jsx)(n.p,{children:"This makes it so that only your specific address can mint from the contract, it will error otherwise."}),"\n",(0,r.jsxs)(n.p,{children:["Complete the role update by clicking ",(0,r.jsx)(n.code,{children:"write"})," and sign the sponsored transaction."]}),"\n",(0,r.jsx)(n.h4,{id:"update-metadata",children:"Update metadata"}),"\n",(0,r.jsxs)(n.p,{children:["Next, you'll need to update the metadata with your media or assets for your contract, which can be done by ",(0,r.jsx)(n.a,{href:"/guides/manage-contract-metadata-builder",children:"following this guide"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"contract-sponsoring",children:"Contract sponsoring"}),"\n",(0,r.jsxs)(n.p,{children:["Finally, in order to sponsor the contract follow ",(0,r.jsx)(n.a,{href:"/guides/sponsor-contract-gas-tank",children:"this guide"})," to sponsor a contract."]}),"\n",(0,r.jsx)(n.h2,{id:"3-use-ethauthproof-to-prevent-eoa-ddos",children:"3. Use EthAuthProof to prevent EOA DDoS"}),"\n",(0,r.jsxs)(n.p,{children:["Now that we have a contract deployed, we can return to the cloudflare worker directory and project, and install ",(0,r.jsx)(n.code,{children:"ethers"})," and ",(0,r.jsx)(n.code,{children:"0xsequence"})," to get access to sequence APIs in order to perform a proof validation that the request is coming from a trusted source, a sequence wallet."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"pnpm install 0xsequence @0xsequence/network\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then, we have to add a type of middleware, after we check if it's a POST or GET request. If it's a POST request, verify that the passed in ",(0,r.jsx)(n.code,{children:"proofString"})," and ",(0,r.jsx)(n.code,{children:"address"})," are valid, as well as the environment variables."]}),"\n",(0,r.jsxs)(n.p,{children:["The code scaffold placed into ",(0,r.jsx)(n.code,{children:"src/index.ts"})," would look like this, with ",(0,r.jsx)(n.code,{children:"callContract"})," and ",(0,r.jsx)(n.code,{children:"getBlockNumber"})," mocked out, using the mentioned verification step of calling ",(0,r.jsx)(n.code,{children:"verify"})," before any contract call."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { sequence } from '0xsequence'\nimport { networks, findSupportedNetwork } from '@0xsequence/network'\n\nexport interface Env {\n\tPKEY: string; // Private key for EOA wallet\n\tCONTRACT_ADDRESS: string; // Deployed ERC1155 or ERC721 contract address\n\tPROJECT_ACCESS_KEY: string; // From sequence.build\n\tCHAIN_HANDLE: string; // Standardized chain name \u2013 See https://docs.sequence.xyz/multi-chain-support\n}\n\n// use the sequence api to verify proof came from a sequence wallet\nconst verify = async (chainId: string, walletAddress: string, ethAuthProofString: string): Promise<Boolean> => {\n\tconst api = new sequence.api.SequenceAPIClient('https://api.sequence.app')\n\tconst { isValid } = await api.isValidETHAuthProof({\n\t\tchainId, walletAddress, ethAuthProofString\n\t})\n\treturn isValid\n}\n\nasync function handleRequest(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n\tif (env.PKEY === undefined || env.PKEY === '') {\n\t\treturn new Response('Make sure PKEY is configured in your environment', { status: 400 })\n\t}\n\n\tif (env.CONTRACT_ADDRESS === undefined || env.CONTRACT_ADDRESS === '') {\n\t\treturn new Response('Make sure CONTRACT_ADDRESS is configured in your environment', { status: 400 })\n\t}\n\n\tif (env.PROJECT_ACCESS_KEY === undefined || env.PROJECT_ACCESS_KEY === '') {\n\t\treturn new Response('Make sure PROJECT_ACCESS_KEY is configured in your environment', { status: 400 })\n\t}\n\n\tif (env.CHAIN_HANDLE === undefined || env.CHAIN_HANDLE === '') {\n\t\treturn new Response('Make sure CHAIN_HANDLE is configured in your environment', { status: 400 })\n\t}\n\n\tconst chainConfig = findSupportedNetwork(env.CHAIN_HANDLE)\n\n\tif (chainConfig === undefined) {\n\t\treturn new Response('Unsupported network or unknown CHAIN_HANDLE', { status: 400 })\n\t}\n\n\t// POST request\n\tif (request.method === \"POST\") {\n\t\t// parse the request body as JSON\n\t\tconst body = await request.json();\n\t\tconst { proof, address, tokenId }: any = body;\n\t\ttry {\n\t\t\t// check that the proof is valid\n\t\t\tif(await verify(env.CHAIN_HANDLE, address, proof)){\n\t\t\t\ttry{\n\t\t\t\t\t// mocked call\n\t\t\t\t\tconst res = await callContract(request, env, address, tokenId)\n\t\t\t\t\treturn new Response(`${res.hash}`, { status: 200 })\n\t\t\t\t} catch (err: any) {\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t\treturn new Response(`Something went wrong: ${JSON.stringify(err)}`, { status: 400 })\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn new Response(`Unauthorized`, { status: 401 })\n\t\t\t}\n\t\t} catch(err: any){\n\t\t\treturn new Response(`Unauthorized ${JSON.stringify(err)}`, { status: 401 })\n\t\t}\n\t} \n\t// GET request\n\telse {\n\t\ttry {\n\t\t\t// mocked call\n\t\t\tconst res = await getBlockNumber(env.CHAIN_HANDLE, request)\n\t\t\treturn new Response(`Block Number: ${res}`)\n\t\t} catch(err: any){\n\t\t\treturn new Response(`Something went wrong: ${JSON.stringify(err)}`, { status: 500 })\n\t\t}\n\t}\n}\n\nconst getBlockNumber = async (chainId: string, request: Request): Promise<number> => {\n\treturn chainId\n}\n\nconst callContract = async (request: Request, env: Env, address: string, tokenId: number): Promise<ethers.providers.TransactionResponse> => {\n\treturn { hash: \"0x\" } as any\n}\n\nexport default {\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext) {\n\t\t// Process the request and create a response\n\t\tconst response = await handleRequest(request, env, ctx);\n\n\t\t// Set CORS headers\n\t\tresponse.headers.set(\"Access-Control-Allow-Origin\", \"*\");\n\t\tresponse.headers.set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n\t\tresponse.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type\");\n\n\t\t// return response\n\t\treturn response;\n\t}\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"add-cloudflare-environment-variables",children:"Add cloudflare environment variables"}),"\n",(0,r.jsxs)(n.p,{children:["Then, pass in the environment variables for your build by updating the ",(0,r.jsx)(n.code,{children:"[vars]"})," section in your ",(0,r.jsx)(n.code,{children:"wrangler.toml"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[vars]\nPKEY = "" # Private key for EOA wallet\nCONTRACT_ADDRESS = "" # // Deployed ERC1155 or ERC721 contract address\nPROJECT_ACCESS_KEY = "" # From sequence.build\nCHAIN_HANDLE = "" # // Standardized chain name \u2013 See https://docs.sequence.xyz/multi-chain-support\n'})}),"\n",(0,r.jsx)(n.h4,{id:"implement-window-object-in-wrangler-template",children:"Implement window object in wrangler template"}),"\n",(0,r.jsxs)(n.p,{children:["It should be noted, if you try to deploy this you'll get a missing ",(0,r.jsx)(n.code,{children:"window"})," object required by the web3 modules."]}),"\n",(0,r.jsxs)(n.p,{children:["To prevent this, add the following line to your ",(0,r.jsx)(n.code,{children:"wrangler.toml"})," file to make the environment compatible."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"...\nnode_compat = true # add this line\n...\n"})}),"\n",(0,r.jsx)(n.h4,{id:"testing-the-deploy",children:"Testing the deploy"}),"\n",(0,r.jsxs)(n.p,{children:["You can now redeploy using ",(0,r.jsx)(n.code,{children:"wrangler deploy"})]}),"\n",(0,r.jsx)(n.p,{children:"And perform a curl request to test your endpoint like such:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'curl -X POST https://your-worker.your-subdomain.workers.dev \\\n-H "Content-Type: application/json" \\\n-d \'{"proof": "someProof", "address": "someAddress", "tokenId": 0 }\'\n\n... invalid proof string ... \n\n# and if you replace with actual proof (from a wallet client login) and address on polygon, it should return \nsuccess\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can acquire your wallet address proof by using this ",(0,r.jsx)(n.a,{href:"https://73eql-hyaaa-aaaad-qf5bq-cai.ic.fleek.co/",children:"dapp"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"4-mint-a-collectible-to-wallet",children:"4. Mint a collectible to wallet"}),"\n",(0,r.jsx)(n.p,{children:"Finally, to deploy and mint a collectible from the sponsored contract address, we install the following packages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"pnpm install @0xsequence/auth ethers@5.7.2\n"})}),"\n",(0,r.jsxs)(n.p,{children:["and implement the ",(0,r.jsx)(n.code,{children:"callContract"})," and ",(0,r.jsx)(n.code,{children:"getBlockNumber"})," methods previously mocked out as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { ethers } from 'ethers'\nimport { Session, SessionSettings } from '@0xsequence/auth'\n\n...\n\nconst getBlockNumber = async (chainId: string, request: Request): Promise<number> => {\n\tconst nodeUrl = `https://nodes.sequence.app/${chainId}`\n\tconst provider = new ethers.providers.JsonRpcProvider({ url: nodeUrl, skipFetchSetup: true })\n\treturn await provider.getBlockNumber()\n}\n\nconst callContract = async (request: Request, env: Env, address: string, tokenId: number): Promise<ethers.providers.TransactionResponse> => {\n\n\tconst nodeUrl = `https://nodes.sequence.app/${env.CHAIN_HANDLE}`\n\tconst relayerUrl = `https://${env.CHAIN_HANDLE}-relayer.sequence.app`\n\tconst provider = new ethers.providers.JsonRpcProvider({ url: nodeUrl, skipFetchSetup: true })\n    const contractAddress = env.CONTRACT_ADDRESS\n\n    // create EOA from private key\n\tconst walletEOA = new ethers.Wallet(env.PKEY, provider);\n\n\t// instantiate settings\n\tconst settings: Partial<SessionSettings> = {\n\t\tnetworks: [{\n\t\t\t...networks[findSupportedNetwork(env.CHAIN_HANDLE)!.chainId],\n\t\t\trpcUrl: findSupportedNetwork(env.CHAIN_HANDLE)!.rpcUrl,\n\t\t\tprovider: provider,\n\t\t\trelayer: {\n\t\t\t\turl: relayerUrl,\n\t\t\t\tprovider: {\n\t\t\t\t\turl: findSupportedNetwork(env.CHAIN_HANDLE)!.rpcUrl\n\t\t\t\t}\n\t\t\t}\n\t\t}],\n\t}\n\n    // create a single signer sequence wallet session\n\tconst session = await Session.singleSigner({\n\t\tsettings: settings,\n\t\tsigner: walletEOA,\n\t\tprojectAccessKey: env.PROJECT_ACCESS_KEY\n\t})\n\n\t// get signer\n\tconst signer = session.account.getSigner(findSupportedNetwork(env.CHAIN_HANDLE)!.chainId)\n\t\t\n\t// create interface from partial abi\n\tconst collectibleInterface = new ethers.utils.Interface([\n\t\t'function mint(address to, uint256 tokenId, uint256 amount, bytes data)'\n\t])\n\t\n\t// create calldata\n\tconst data = collectibleInterface.encodeFunctionData(\n\t\t'mint', [address, tokenId, 1, \"0x00\"]\n\t)\n\n\t// create transaction object\n\tconst txn = { to: contractAddress, data }\n\n\ttry {\n\t\treturn await signer.sendTransaction(txn)\n\t} catch (err) {\n\t\tthrow err\n\t}\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Once these steps are complete, you can redeploy and test with the steps outlined in this ",(0,r.jsx)(n.a,{href:"/relayer/mint-collectibles-serverless#testing",children:"prior step"}),", and this time the POST request should return a transaction hash for the completed mint and the GET request would return a block number."]}),"\n",(0,r.jsxs)(n.p,{children:["If you want to browse the full code, see ",(0,r.jsx)(n.a,{href:"https://github.com/0xsequence-demos/cloudflare-worker-sequence-relayer",children:"an example implementation here"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7279:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>i});var r=t(959);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);