"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1344],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>p});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),u=l(t),p=a,m=u["".concat(c,".").concat(p)]||u[p]||d[p]||s;return t?r.createElement(m,i(i({ref:n},g),{},{components:t})):r.createElement(m,i({ref:n},g))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3632:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={},i="Signing Messages",o={unversionedId:"getting-started/sign-message",id:"getting-started/sign-message",title:"Signing Messages",description:"Sending an ERC-20 token",source:"@site/docs/02-getting-started/02-sign-message.mdx",sourceDirName:"02-getting-started",slug:"/getting-started/sign-message",permalink:"/getting-started/sign-message",draft:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/02-getting-started/02-sign-message.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"sidebar",previous:{title:"Quick Start",permalink:"/quickstart"},next:{title:"Sending an ERC20 token",permalink:"/getting-started/erc20-token"}},c={},l=[{value:"Sending an ERC-20 token",id:"sending-an-erc-20-token",level:2}],g={toc:l};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"signing-messages"},"Signing Messages"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Get the wallet provider and signer instances\nconst wallet = sequence.getWallet()\nconst provider = wallet.getProvider()\nconst signer = wallet.getSigner()\n\n// Prepare the message string\nconst message = `I've been to web3 & back again :D`\n\n// Sign the message\nconst signature = await signer.signMessage(message)\nconsole.log('message signature:', signature)\n\n// Validate the signed message. The sequence utils `isValidMessageSignature` method\n// supports validating both EOA and Smart Wallet (EIP1271) signatures with this simple call.\nconst isValid = await sequence.utils.isValidMessageSignature(\n  await wallet.getAddress(),\n  message,\n  signature,\n  provider\n)\n\nconsole.log('isValid?', isValid)\nif (!isValid) throw new Error('signature is invalid')\n")),(0,a.kt)("h2",{id:"sending-an-erc-20-token"},"Sending an ERC-20 token"),(0,a.kt)("p",null,"Let's now send some USDC tokens to another wallet address on the network."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Part of the ERC20 ABI, so we can encode a `transfer` call\nconst erc20Interface = new ethers.utils.Interface([\n  'function transfer(address _to, uint256 _value)'\n])\n\n// Get the wallet signer interface\nconst wallet = sequence.getWallet()\nconst signer = wallet.getSigner()\n\n// USDC contract address on Polygon network\nconst usdcContractAddress = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174'\n\n// Sending to a recipient address\nconst recipientAddress = '0x8b4de256180cfec54c436a470af50f9ee2813dbb'\n\n// Sending 1.50 USDC, note USDC has 6 decimal places\nconst amount = ethers.utils.parseUnits('1.50', 6)\n\n// Encode an ERC-20 token transfer to recipient of the specified amount\nconst data = erc20Interface.encodeFunctionData(\n  'transfer', [recipientAddress, amount]\n)\n\n// Prepare Transaction object\nconst tx: sequence.transactions.Transaction = {\n  to: usdcContractAddress,\n  data: data\n}\n\n// Send the transaction via the signer to the blockchain :D The signer will prompt the user\n// sign+send the transaction, and once the user confirms it will be transmitted.\nconst txnResp = await signer.sendTransaction(tx)\n\n// Wait for the transaction to be mined by the network\nawait txnResp.wait()\n\n// We're done, print the transaction hash, and open it up in your block explorer\nconsole.log('transaction hash:', txnResp.hash)\n")))}d.isMDXComponent=!0}}]);