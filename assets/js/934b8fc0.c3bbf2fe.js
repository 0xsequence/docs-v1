"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[3009],{8500:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var t=o(1527),c=o(4089);const s={sidebar_label:"Custom Connectors"},r="Custom Connectors in Sequence Kit",i={id:"wallet/connectors/kit/custom-connectors",title:"Custom Connectors in Sequence Kit",description:"Sequence Kit provides official connectors via the @0xsequence/kit-connectors package. However, you can also integrate custom connectors with Sequence Kit to support additional wallets. This guide will walk you through creating and using custom connectors.",source:"@site/docs/03-wallet/05-connectors/02-kit/05-custom-connectors.mdx",sourceDirName:"03-wallet/05-connectors/02-kit",slug:"/wallet/connectors/kit/custom-connectors",permalink:"/wallet/connectors/kit/custom-connectors",draft:!1,unlisted:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/03-wallet/05-connectors/02-kit/05-custom-connectors.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Custom Connectors"},sidebar:"sidebar",previous:{title:"Checkout",permalink:"/wallet/connectors/kit/checkout"},next:{title:"Using Wagmi",permalink:"/wallet/connectors/wagmi"}},a={},u=[{value:"Creating a Custom Connector",id:"creating-a-custom-connector",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,c.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"custom-connectors-in-sequence-kit",children:"Custom Connectors in Sequence Kit"}),"\n",(0,t.jsxs)(e.p,{children:["Sequence Kit provides official connectors via the ",(0,t.jsx)(e.a,{href:"https://github.com/0xsequence/kit/tree/master/packages/connectors",children:"@0xsequence/kit-connectors"})," package. However, you can also integrate custom connectors with Sequence Kit to support additional wallets. This guide will walk you through creating and using custom connectors."]}),"\n",(0,t.jsx)(e.h2,{id:"creating-a-custom-connector",children:"Creating a Custom Connector"}),"\n",(0,t.jsxs)(e.p,{children:["To create a custom connector, you can use an existing connector as a basis. For example, the ",(0,t.jsx)(e.a,{href:"https://github.com/0xsequence/kit/blob/master/packages/connectors/src/connectors/metamask/metamask.ts",children:"Metamask Connector"})," is a good starting point. Here's an example of how to create a custom connector:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"export const myCustomConnector = ({ chains }: MyCustomConnectorOptions) => ({\n  id: 'my-custom-connector',\n  name: 'My Custom Connector',\n  logoDark: MyCustomLogoDark,\n  logoLight: MyCustomLogoLight,\n  createConnector: () => {\n    const connector = new MyCustomConnector({\n      chains,\n      // Customize connector options here\n    });\n    return connector;\n  },\n});\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Make sure to provide a unique ",(0,t.jsx)(e.code,{children:"id"})," for your connector to avoid conflicts with other connectors. You can also customize fields such as ",(0,t.jsx)(e.code,{children:"name"}),", ",(0,t.jsx)(e.code,{children:"logoDark"}),", and ",(0,t.jsx)(e.code,{children:"logoLight"})," to control how the connector appears in Sequence Kit."]}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"createConnector"})," function should return an initialized connector. Sequence Kit connectors are wrappers of Wagmi connectors, so you can use an official Wagmi connector if available, or create your own if needed."]}),"\n",(0,t.jsxs)(e.p,{children:["For more details on creating custom connectors, refer to ",(0,t.jsx)(e.a,{href:"https://wagmi.sh/examples/custom-connector",children:"Wagmi's guide on Custom Connectors"}),"."]}),"\n",(0,t.jsx)(e.h1,{id:"using-custom-connectors",children:"Using Custom Connectors"}),"\n",(0,t.jsxs)(e.p,{children:["When using custom connectors, you can't rely on the ",(0,t.jsx)(e.code,{children:"getDefaultConnectors"})," utility function. Instead, you need to pass custom configurations to Sequence Kit."]}),"\n",(0,t.jsx)(e.p,{children:"First, create a list of connectors, including your custom connector, and provide it to the Wagmi configuration:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import { getKitConnectWallets } from '@0xsequence/kit';\n\nconst connectors = getKitConnectWallets([\n  google({\n    chains,\n    options: {\n      defaultNetwork: 137,\n    },\n  }),\n  // ... other connectors\n  myCustomConnector({ chains }),\n]);\n\nconst config = createConfig({\n  autoConnect: true,\n  publicClient,\n  webSocketPublicClient,\n  connectors,\n});\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Next, use your custom connector by specifying its ",(0,t.jsx)(e.code,{children:"id"})," in either the ",(0,t.jsx)(e.code,{children:"authOptions"})," or ",(0,t.jsx)(e.code,{children:"miniAuthOptions"})," field of the Sequence Kit configuration:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"const kitConfig = {\n  signIn: {\n    miniAuthOptions: ['google', 'facebook'],\n    authOptions: ['metamask', 'my-custom-connector'],\n  }\n};\n\nreturn (\n  <WagmiConfig config={wagmiConfig}>\n    <KitProvider config={kitConfig}>\n      <App />\n    </KitProvider>\n  </WagmiConfig>\n);\n"})}),"\n",(0,t.jsx)(e.h1,{id:"share-your-custom-connectors",children:"Share Your Custom Connectors"}),"\n",(0,t.jsxs)(e.p,{children:["Feel free to contribute your custom connectors by creating a ",(0,t.jsx)(e.a,{href:"https://github.com/0xsequence/kit/pulls",children:"pull request"}),". This way, others can benefit from your work and enjoy seamless integration with Sequence Kit."]}),"\n",(0,t.jsx)(e.p,{children:"Share the love \u2764\ufe0f by expanding the ecosystem of custom connectors!"})]})}function d(n={}){const{wrapper:e}={...(0,c.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}},4089:(n,e,o)=>{o.d(e,{Z:()=>i,a:()=>r});var t=o(959);const c={},s=t.createContext(c);function r(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:r(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);