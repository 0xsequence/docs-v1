"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[8451],{6126:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>o,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var n=a(1527),s=a(7279);const i={},l="Wallets",c={id:"unity-waas-sdk/Advanced/wallets",title:"Wallets",description:"In the context of SequenceEthereum, a Wallet is defined by the IWallet interface. There are currently 2 implementations of the IWallet interface in this SDK.",source:"@site/docs/120-unity-waas-sdk/Advanced/02-wallets.mdx",sourceDirName:"120-unity-waas-sdk/Advanced",slug:"/unity-waas-sdk/Advanced/wallets",permalink:"/unity-waas-sdk/Advanced/wallets",draft:!1,unlisted:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/120-unity-waas-sdk/Advanced/02-wallets.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"sidebar",previous:{title:"Advanced - Introduction",permalink:"/unity-waas-sdk/Advanced/introduction"},next:{title:"Clients",permalink:"/unity-waas-sdk/Advanced/clients"}},r={},d=[{value:"1. EthWallet",id:"1-ethwallet",level:2},{value:"2. WaaSToWalletAdapter",id:"2-waastowalletadapter",level:2},{value:"Methods",id:"methods",level:2},{value:"GetAddress",id:"getaddress",level:3},{value:"SendTransaction",id:"sendtransaction",level:3},{value:"SendTransactionAndWaitForReceipt",id:"sendtransactionandwaitforreceipt",level:3},{value:"SendTransactionBatch",id:"sendtransactionbatch",level:3},{value:"SendTransactionBatchAndWaitForReceipts",id:"sendtransactionbatchandwaitforreceipts",level:3},{value:"SignMessage",id:"signmessage",level:3}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"wallets",children:"Wallets"}),"\n",(0,n.jsxs)(t.p,{children:["In the context of SequenceEthereum, a ",(0,n.jsx)(t.code,{children:"Wallet"})," is defined by the ",(0,n.jsx)(t.code,{children:"IWallet"})," interface. There are currently 2 implementations of the ",(0,n.jsx)(t.code,{children:"IWallet"})," interface in this SDK."]}),"\n",(0,n.jsxs)(t.h2,{id:"1-ethwallet",children:["1. ",(0,n.jsx)(t.a,{href:"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Wallet/EthWallet.cs",children:"EthWallet"})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"EthWallet"})," is a standard ",(0,n.jsx)(t.a,{href:"https://ethereum.stackexchange.com/questions/5828/what-is-an-eoa-account",children:"EOA wallet"})," for EVM chains."]}),"\n",(0,n.jsx)(t.p,{children:"An EthWallet is easily created:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"IWallet eoaWallet = new EthWallet(); // This will generate a cryptographically random private key\nIWallet eoaWallet = new EthWallet(privateKeyString); // Create a wallet using a previously generated private key\n"})}),"\n",(0,n.jsxs)(t.h2,{id:"2-waastowalletadapter",children:["2. ",(0,n.jsx)(t.a,{href:"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/WaaS/WaaSToWalletAdapter.cs",children:"WaaSToWalletAdapter"})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"WaaSToWalletAdapter"})," is an adapter that allows you to use a ",(0,n.jsx)(t.code,{children:"WaaSWallet"})," with the same ",(0,n.jsxs)(t.a,{href:"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Wallet/IWallet.cs",children:[(0,n.jsx)(t.code,{children:"IWallet"})," interface"]})," as an ",(0,n.jsx)(t.code,{children:"EthWallet"})," so that it may be used interchangeably with EOA wallets throughout the rest of the SequenceEthereum library."]}),"\n",(0,n.jsx)(t.p,{children:"A WaaSToWalletAdapter is easily created once you have a WaaSWallet:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"IWallet waasAdapter = new WaaSToWalletAdapter(waasWallet);\n"})}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsxs)(t.a,{href:"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Wallet/IWallet.cs",children:[(0,n.jsx)(t.code,{children:"IWallet"})," interface"]})," provides a number of methods for you. The most important of which are:"]}),"\n",(0,n.jsx)(t.h3,{id:"getaddress",children:"GetAddress"}),"\n",(0,n.jsxs)(t.p,{children:["Returns the ",(0,n.jsx)(t.code,{children:"Address"})," for the wallet"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"Address address = wallet.GetAddress();\n"})}),"\n",(0,n.jsx)(t.h3,{id:"sendtransaction",children:"SendTransaction"}),"\n",(0,n.jsxs)(t.p,{children:["Signs the given ",(0,n.jsx)(t.code,{children:"EthTransaction"})," and submits it via the given client"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"string transactionHash = await wallet.SendTransaction(client, transaction);\n"})}),"\n",(0,n.jsx)(t.h3,{id:"sendtransactionandwaitforreceipt",children:"SendTransactionAndWaitForReceipt"}),"\n",(0,n.jsxs)(t.p,{children:["Signs the given ",(0,n.jsx)(t.code,{children:"EthTransaction"})," and submits it via the given client then waits for the ",(0,n.jsx)(t.code,{children:"TransactionReceipt"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);\n"})}),"\n",(0,n.jsx)(t.h3,{id:"sendtransactionbatch",children:"SendTransactionBatch"}),"\n",(0,n.jsxs)(t.p,{children:["Signs the given ",(0,n.jsx)(t.code,{children:"EthTransaction[]"})," and submits them via the given client.\nIf wallet is an ",(0,n.jsx)(t.code,{children:"EthWallet"}),", the transactions will be submitted sequentially, each of which may pass or fail. If the wallet is a ",(0,n.jsx)(t.code,{children:"WaaSToWalletAdapter"}),", the transactions will be batched together into a single transaction that is submitted all at once and either passes or fails as a whole.\nSimilarly, if a wallet is an ",(0,n.jsx)(t.code,{children:"EthWallet"})," the ",(0,n.jsx)(t.code,{children:"string[]"})," (transaction hashes) you receive will be equal in length to the ",(0,n.jsx)(t.code,{children:"EthTransaction[]"})," you submitted. While, if the wallet is a ",(0,n.jsx)(t.code,{children:"WaaSToWalletAdapter"}),", you will only receive one transaction hash (",(0,n.jsx)(t.code,{children:"string[]"})," of length 1)"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"string[] transactionHashes = await wallet.SendTransactionBatch(client, transactions);\n"})}),"\n",(0,n.jsx)(t.h3,{id:"sendtransactionbatchandwaitforreceipts",children:"SendTransactionBatchAndWaitForReceipts"}),"\n",(0,n.jsxs)(t.p,{children:["Signs the given ",(0,n.jsx)(t.code,{children:"EthTransaction[]"})," and submits them via the given client then waits for the ",(0,n.jsx)(t.code,{children:"TransactionReceipt[]"}),".\nIf wallet is an ",(0,n.jsx)(t.code,{children:"EthWallet"}),", the transactions will be submitted sequentially, each of which may pass or fail. If the wallet is a ",(0,n.jsx)(t.code,{children:"WaaSToWalletAdapter"}),", the transactions will be batched together into a single transaction that is submitted all at once and either passes or fails as a whole.\nSimilarly, if a wallet is an ",(0,n.jsx)(t.code,{children:"EthWallet"})," the ",(0,n.jsx)(t.code,{children:"TransactionReceipt[]"})," you receive will be equal in length to the ",(0,n.jsx)(t.code,{children:"EthTransaction[]"})," you submitted. While, if the wallet is a ",(0,n.jsx)(t.code,{children:"WaaSToWalletAdapter"}),", you will only receive one transaction receipt (",(0,n.jsx)(t.code,{children:"TransactionReceipt[]"})," of length 1)"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"TransactionReceipt[] receipts = await wallet.SendTransactionAndWaitForReceipt(client, transactions);\n"})}),"\n",(0,n.jsx)(t.h3,{id:"signmessage",children:"SignMessage"}),"\n",(0,n.jsx)(t.p,{children:"Given a message and an optional chain id, sign the message using the wallet. Omit the chain id from the signature if not provided"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"string signedMessage = await wallet.SignMessage(message, chainId)\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Note: the chainId is expected to be in hexadecimal format. If you are working with a ",(0,n.jsx)(t.code,{children:"Chain"})," object (recommended), you can use the ",(0,n.jsx)(t.code,{children:"AsString"})," method to get the hexadecimal format of the chain id"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"string signedMessage = await wallet.SignMessage(message, Chain.Polygon.AsString());\n"})})]})}function o(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},7279:(e,t,a)=>{a.d(t,{Z:()=>c,a:()=>l});var n=a(959);const s={},i=n.createContext(s);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);