"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[4451],{9246:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=s(1527),i=s(7279);const r={slug:"/migrate-sequence-js-1-1-0"},a="Migrate to sequence.js v1.1.0",c={id:"support/migrate-1-1-0",title:"Migrate to sequence.js v1.1.0",description:"This document explains how to migrate to sequence.js v1.1.0 from earlier versions.",source:"@site/docs/30-support/02-migrate-1-1-0.mdx",sourceDirName:"30-support",slug:"/migrate-sequence-js-1-1-0",permalink:"/migrate-sequence-js-1-1-0",draft:!1,unlisted:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/30-support/02-migrate-1-1-0.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/migrate-sequence-js-1-1-0"},sidebar:"sidebar",previous:{title:"Community & Support",permalink:"/support"},next:{title:"Sequence - Wallet as a service",permalink:"/waas/intro/"}},o={},l=[{value:"Changes",id:"changes",level:2},{value:"Init library",id:"init-library",level:3},{value:"Wallet class instance",id:"wallet-class-instance",level:3},{value:"Custom network provider and signer",id:"custom-network-provider-and-signer",level:4},{value:"Connect wallet",id:"connect-wallet",level:3},{value:"Sign EIP-6492 messages",id:"sign-eip-6492-messages",level:3},{value:"Operate on a specific network",id:"operate-on-a-specific-network",level:3},{value:"Send batch transactions",id:"send-batch-transactions",level:3},{value:"Removal of internal state methods",id:"removal-of-internal-state-methods",level:3},{value:"Rainbowkit Connector",id:"rainbowkit-connector",level:3},{value:"Wagmi Connector",id:"wagmi-connector",level:4},{value:"Rainbowkit &amp; Wagmi Connector - EIP-6492 Signatures",id:"rainbowkit--wagmi-connector---eip-6492-signatures",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"migrate-to-sequencejs-v110",children:"Migrate to sequence.js v1.1.0"}),"\n",(0,t.jsx)(n.p,{children:"This document explains how to migrate to sequence.js v1.1.0 from earlier versions."}),"\n",(0,t.jsx)(n.h2,{id:"changes",children:"Changes"}),"\n",(0,t.jsx)(n.h3,{id:"init-library",children:"Init library"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"initWallet"})," function's ",(0,t.jsx)(n.code,{children:"network"})," parameter has been replaced. Now, it accepts a configuration object that ",(0,t.jsx)(n.em,{children:"may"})," include a ",(0,t.jsx)(n.code,{children:"defaultNetwork"})," parameter."]}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const wallet = sequence.initWallet('mainnet')\n"})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const wallet = sequence.initWallet({ defaultNetwork: 'mainnet' })\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The parameter remains optional. If not provided, the default network will be ",(0,t.jsx)(n.code,{children:"mainnet"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"wallet-class-instance",children:"Wallet class instance"}),"\n",(0,t.jsxs)(n.p,{children:["Previously, both ",(0,t.jsx)(n.code,{children:"initWallet"})," and ",(0,t.jsx)(n.code,{children:"getWallet"})," returned a ",(0,t.jsx)(n.code,{children:"Wallet"})," instance, which could be used to access both a provider and a signer. Now, they return a ",(0,t.jsx)(n.code,{children:"SequenceProvider"}),", which already functions as the provider while offering sequence-specific methods."]}),"\n",(0,t.jsxs)(n.p,{children:["Methods such as ",(0,t.jsx)(n.code,{children:"getSigner"})," and ",(0,t.jsx)(n.code,{children:"getProvider"})," are still available in ",(0,t.jsx)(n.code,{children:"SequenceProvider"}),". Note that calling ",(0,t.jsx)(n.code,{children:"getProvider()"})," will return ",(0,t.jsx)(n.code,{children:"this"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const wallet = sequence.initWallet('mainnet')\nconst provider = wallet.getProvider()\nconst signer = wallet.getSigner()\n"})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const provider = sequence.initWallet({ defaultNetwork: 'mainnet' })\nconst signer = provider.getSigner()\n"})}),"\n",(0,t.jsx)(n.h4,{id:"custom-network-provider-and-signer",children:"Custom network provider and signer"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"getProvider"})," and ",(0,t.jsx)(n.code,{children:"getSigner"})," methods now accept an optional ",(0,t.jsx)(n.code,{children:"network"})," parameter. This is handy when you wish to use a custom provider or signer for a specific network. In such cases, a tailored network provider/signer is created, and the method does ",(0,t.jsx)(n.strong,{children:"not"})," return ",(0,t.jsx)(n.code,{children:"this"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"connect-wallet",children:"Connect wallet"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"connect"})," function now mandates an ",(0,t.jsx)(n.code,{children:"app"})," parameter, representing the app name requesting the connection. This name will be displayed to the user."]}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const connectDetails = await wallet.connect()\n"})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const connectDetails = await wallet.connect({ app: 'Your app name' })\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sign-eip-6492-messages",children:"Sign EIP-6492 messages"}),"\n",(0,t.jsxs)(n.p,{children:["EIP-6492 allows the wallet to sign messages without first executing a transaction. This feature should be utilized only when the signature will be validated by software supporting EIP-6492, such as the sequence.js library. All ",(0,t.jsx)(n.code,{children:"sign"})," methods of the signer use EIP-6492 by default."]}),"\n",(0,t.jsxs)(n.p,{children:["To opt out of EIP-6492, previously you could append a ",(0,t.jsx)(n.code,{children:"false"})," value at the end of each sign method; now you can pass an ",(0,t.jsx)(n.code,{children:"eip6492"})," named argument."]}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const signature = await signer.signMessage(message, undefined, false)\n"})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const signature = await signer.signMessage(message, { eip6492: false })\n"})}),"\n",(0,t.jsx)(n.h3,{id:"operate-on-a-specific-network",children:"Operate on a specific network"}),"\n",(0,t.jsxs)(n.p,{children:["Earlier, most methods of the signer and provider would target the default network. You could alter this by adding a positional ",(0,t.jsx)(n.code,{children:"network"})," argument at the end of each method. This has been swapped with a named ",(0,t.jsx)(n.code,{children:"chainId"})," argument, which can be combined with other named arguments, such as ",(0,t.jsx)(n.code,{children:"eip6492"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const balance = await provider.sendTransaction(transaction, 'rinkeby')\n"})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const balance = await provider.sendTransaction(transaction, { chainId: 'rinkeby' })\n"})}),"\n",(0,t.jsx)(n.h3,{id:"send-batch-transactions",children:"Send batch transactions"}),"\n",(0,t.jsxs)(n.p,{children:["Previously, separate methods (",(0,t.jsx)(n.code,{children:"sendTransactionBatch"})," and ",(0,t.jsx)(n.code,{children:"sendTransaction"}),") were provided for batch transactions. Now, there's just ",(0,t.jsx)(n.code,{children:"sendTransaction"})," that can receive either an array of transactions or a singular transaction."]}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const receipt1 = await provider.sendTransactionBatch([transaction1, transaction2])\n"})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const receipt1 = await provider.sendTransaction([transaction1, transaction2])\n"})}),"\n",(0,t.jsx)(n.h3,{id:"removal-of-internal-state-methods",children:"Removal of internal state methods"}),"\n",(0,t.jsx)(n.p,{children:"Some internal state methods have been either removed or deprecated. This encompasses methods for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Determining if the wallet is deployed"}),"\n",(0,t.jsx)(n.li,{children:'Retrieving the wallet\'s "sequence context"'}),"\n",(0,t.jsx)(n.li,{children:'Accessing the "inner configuration" of the wallet (i.e., its comprising signers)'}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Should you require any of these methods, please reach out to ",(0,t.jsx)(n.a,{href:"./support",children:"support"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"rainbowkit-connector",children:"Rainbowkit Connector"}),"\n",(0,t.jsxs)(n.p,{children:["Compatibility with the Rainbowkit connector has been largely retained. However, the configuration for ",(0,t.jsx)(n.code,{children:"defaultNetwork"})," has been relocated. Previously, it was set under ",(0,t.jsx)(n.code,{children:"connect.networkId"}),". Now, it has been elevated to a top-level property named ",(0,t.jsx)(n.code,{children:"defaultNetwork"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"sequenceWallet({\n  chains,\n  connect: {\n    app: 'Demo app',\n    networkId: 1,\n  },\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"sequenceWallet({\n  chains,\n  defaultNetwork: 1,\n  connect: {\n    app: 'Demo app',\n  },\n})\n"})}),"\n",(0,t.jsx)(n.h4,{id:"wagmi-connector",children:"Wagmi Connector"}),"\n",(0,t.jsx)(n.p,{children:"The Wagmi connector has undergone the same modifications as the Rainbowkit connector."}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"new SequenceConnector({\n  chains,\n  connect: {\n    app: 'Demo app',\n    networkId: 1,\n  },\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"new SequenceConnector({\n  chains,\n  defaultNetwork: 1,\n  connect: {\n    app: 'Demo app',\n  },\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"rainbowkit--wagmi-connector---eip-6492-signatures",children:"Rainbowkit & Wagmi Connector - EIP-6492 Signatures"}),"\n",(0,t.jsxs)(n.p,{children:["In earlier versions, EIP-6492 signatures were activated globally either through the ",(0,t.jsx)(n.code,{children:"useEIP6492"})," configuration property or the ",(0,t.jsx)(n.code,{children:"useSequenceEIP6492"})," method. Both methods have now been deprecated. Attempting to initialize with ",(0,t.jsx)(n.code,{children:"useEIP6492"})," will result in a runtime error."]}),"\n",(0,t.jsxs)(n.p,{children:["For utilizing EIP-6492 in the updated version, you'll need to explicitly invoke ",(0,t.jsx)(n.code,{children:"sequence_sign"})," or ",(0,t.jsx)(n.code,{children:"sequence_signTypedData_v4"})," on the connector."]}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"new SequenceConnector({\n  chains,\n  connect: {\n    app: 'Demo app',\n    networkId: 1,\n    useEIP6492: true,\n  },\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// NOTE: The connector is now initialized without the useEIP6492 property.\n// ...\nconst sig = await walletClient.request({\n  method: 'sequence_sign',\n  params: [message, account]\n}) as string;\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"Ensure Correct Peer Dependency",type:"info",children:[(0,t.jsxs)(n.p,{children:["Both ",(0,t.jsx)(n.code,{children:"@0xsequence/wagmi-connector"})," and ",(0,t.jsx)(n.code,{children:"@0xsequence/rainbowkit-plugin"})," versions ",(0,t.jsx)(n.code,{children:"2.1.0"})," require ",(0,t.jsx)(n.code,{children:"0xsequence"})," as a peer dependency. Ensure that you are using version ",(0,t.jsx)(n.code,{children:"1.1.0"})," or higher of ",(0,t.jsx)(n.code,{children:"0xsequence"}),". Utilizing older versions may lead to instability in your application."]}),(0,t.jsx)(n.p,{children:"This is essential to maintain compatibility and ensure the stable operation of your connectors and plugins."})]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},7279:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>a});var t=s(959);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);