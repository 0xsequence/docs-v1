"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[1910],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,g=p["".concat(i,".").concat(f)]||p[f]||u[f]||o;return n?r.createElement(g,s(s({ref:t},d),{},{components:n})):r.createElement(g,s({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[p]="string"==typeof e?e:a,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7633:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={},s="Sending an ERC20 token",c={unversionedId:"getting-started/erc20-token",id:"getting-started/erc20-token",title:"Sending an ERC20 token",description:"Let's send some USDC tokens to another wallet address on the network.",source:"@site/docs/02-getting-started/03-erc20-token.mdx",sourceDirName:"02-getting-started",slug:"/getting-started/erc20-token",permalink:"/getting-started/erc20-token",draft:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/02-getting-started/03-erc20-token.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"sidebar",previous:{title:"Signing Messages",permalink:"/getting-started/sign-message"},next:{title:"Wallet",permalink:"/wallet"}},i={},l=[],d={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sending-an-erc20-token"},"Sending an ERC20 token"),(0,a.kt)("p",null,"Let's send some USDC tokens to another wallet address on the network."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Part of the ERC20 ABI, so we can encode a `transfer` call\nconst erc20Interface = new ethers.utils.Interface([\n  'function transfer(address _to, uint256 _value)'\n])\n\n// Get the wallet signer interface\nconst wallet = sequence.getWallet()\nconst signer = wallet.getSigner()\n\n// USDC contract address on Polygon network\nconst usdcContractAddress = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174'\n\n// Sending to a recipient address\nconst recipientAddress = '0x8b4de256180cfec54c436a470af50f9ee2813dbb'\n\n// Sending 1.50 USDC, note USDC has 6 decimal places\nconst amount = ethers.utils.parseUnits('1.50', 6)\n\n// Encode an ERC-20 token transfer to recipient of the specified amount\nconst data = erc20Interface.encodeFunctionData(\n  'transfer', [recipientAddress, amount]\n)\n\n// Prepare Transaction object\nconst tx: sequence.transactions.Transaction = {\n  to: usdcContractAddress,\n  data: data\n}\n\n// Send the transaction via the signer to the blockchain :D The signer will prompt the user\n// sign+send the transaction, and once the user confirms it will be transmitted.\nconst txnResp = await signer.sendTransaction(tx)\n\n// Wait for the transaction to be mined by the network\nawait txnResp.wait()\n\n// We're done, print the transaction hash, and open it up in your block explorer\nconsole.log('transaction hash:', txnResp.hash)\n")))}p.isMDXComponent=!0}}]);