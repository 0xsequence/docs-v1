"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[8673],{8165:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=t(1527),a=t(7279);const r={},o="Sending an ERC20 token",c={id:"getting-started/erc20-token",title:"Sending an ERC20 token",description:"Let's send some USDC tokens to another wallet address on the network.",source:"@site/docs/050-getting-started/03-erc20-token.mdx",sourceDirName:"050-getting-started",slug:"/getting-started/erc20-token",permalink:"/getting-started/erc20-token",draft:!1,unlisted:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/050-getting-started/03-erc20-token.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"sidebar",previous:{title:"Signing Messages",permalink:"/getting-started/sign-message"},next:{title:"Get your access key in Sequence Builder",permalink:"/getting-started/get-access-key-in-builder"}},i={},d=[];function l(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"sending-an-erc20-token",children:"Sending an ERC20 token"}),"\n",(0,s.jsx)(n.p,{children:"Let's send some USDC tokens to another wallet address on the network."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Part of the ERC20 ABI, so we can encode a `transfer` call\nconst erc20Interface = new ethers.utils.Interface([\n  'function transfer(address _to, uint256 _value)'\n])\n\n// Get the wallet signer interface\nconst wallet = sequence.getWallet()\nconst signer = wallet.getSigner()\n\n// USDC contract address on Polygon network\nconst usdcContractAddress = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174'\n\n// Sending to a recipient address\nconst recipientAddress = '0x8b4de256180cfec54c436a470af50f9ee2813dbb'\n\n// Sending 1.50 USDC, note USDC has 6 decimal places\nconst amount = ethers.utils.parseUnits('1.50', 6)\n\n// Encode an ERC-20 token transfer to recipient of the specified amount\nconst data = erc20Interface.encodeFunctionData(\n  'transfer', [recipientAddress, amount]\n)\n\n// Prepare Transaction object\nconst tx: sequence.transactions.Transaction = {\n  to: usdcContractAddress,\n  data: data\n}\n\n// Send the transaction via the signer to the blockchain :D The signer will prompt the user\n// sign+send the transaction, and once the user confirms it will be transmitted.\nconst txnResp = await signer.sendTransaction(tx)\n\n// Wait for the transaction to be mined by the network\nawait txnResp.wait()\n\n// We're done, print the transaction hash, and open it up in your block explorer\nconsole.log('transaction hash:', txnResp.hash)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},7279:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>o});var s=t(959);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);