"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[7759],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(t),h=a,f=u["".concat(c,".").concat(h)]||u[h]||p[h]||o;return t?r.createElement(f,s(s({ref:n},d),{},{components:t})):r.createElement(f,s({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=h;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},9429:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={},s="Building a Relaying Server with Sequence",i={unversionedId:"relayer/building-relaying-server",id:"relayer/building-relaying-server",title:"Building a Relaying Server with Sequence",description:"With Sequence, you can create a smart contract wallet your server can use to dispatch transactions for your users",source:"@site/docs/06-relayer/02-building-relaying-server.mdx",sourceDirName:"06-relayer",slug:"/relayer/building-relaying-server",permalink:"/relayer/building-relaying-server",draft:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/06-relayer/02-building-relaying-server.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"sidebar",previous:{title:"Relayer",permalink:"/relayer"},next:{title:"Sequence Games SDK",permalink:"/games-sdk"}},c={},l=[{value:"Nodejs Server",id:"nodejs-server",level:2},{value:"Nodejs Server with Gas Sponsoring using Sequence Builder",id:"nodejs-server-with-gas-sponsoring-using-sequence-builder",level:2},{value:"A. Create Dapp",id:"a-create-dapp",level:3},{value:"B. New Dapp",id:"b-new-dapp",level:3},{value:"C.1 Gas Tank",id:"c1-gas-tank",level:3},{value:"C.2 Add Gas",id:"c2-add-gas",level:3},{value:"C.3 Add Sponsored Address",id:"c3-add-sponsored-address",level:3},{value:"Parallel Transactions",id:"parallel-transactions",level:2}],d={toc:l};function u(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"building-a-relaying-server-with-sequence"},"Building a Relaying Server with Sequence"),(0,a.kt)("p",null,"With Sequence, you can create a smart contract wallet your server can use to dispatch transactions for your users\nwithout you having to be worried about transaction speed, throughput and re-orgs."),(0,a.kt)("admonition",{title:"Sequentual Transactions",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"By default, Sequence transactions will be executed sequentially. ")),(0,a.kt)("h2",{id:"nodejs-server"},"Nodejs Server"),(0,a.kt)("p",null,"Your server will need an EOA wallet that will be able to sign messages. It will be the owner of your server-side Sequence\nwallet which will be used to dispatch transactions."),(0,a.kt)("p",null,"This Sequence wallet should have the correct ownership at your contract level, not the EOA.\nAlso, the Sequence wallet should be sufficiently funded in order to pay fees needed by the relayer to dispatch your transactions."),(0,a.kt)("p",null,"Using this approach - versus the next section (with sponsoring) - includes the ability to pay for gas in any available currency by our relayer (e.g. 'MATIC', 'DAI', 'USDC', 'WETH')."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { RpcRelayer } from '@0xsequence/relayer'\nimport { Wallet } from '@0xsequence/wallet'\nimport { ethers } from 'ethers'\n\n// Get a provider\nconst provider = new ethers.providers.JsonRpcProvider('https://nodes.sequence.app/polygon')\n\n// Create your server EOA\nconst walletEOA = new ethers.Wallet(serverPrivateKey, provider)\n\n// Create your rpc relayer instance with relayer node you want to use\nconst relayer = new RpcRelayer({url: 'https://polygon-relayer.sequence.app', provider: provider})\n\n// Create your Sequence server wallet, controlled by your server EOA, and connect it to the relayer\nconst wallet = (await Wallet.singleOwner(walletEOA)).connect(provider, relayer)\n\n// Craft your transaction\nconst erc721Interface = new ethers.utils.Interface([\n  'function safeTransferFrom(address _from, address _to, uint256 _tokenId)'\n])\n\nconst data = erc721Interface.encodeFunctionData(\n  'safeTransferFrom', [senderAddress, recipientAddress, id]\n)\n\nconst txn = {\n  to: erc721TokenAddress,\n  data\n}\n\n// Request the possible fee options the relayer will accept for this transaction\nconst [config, context] = await Promise.all([wallet.getWalletConfig(), wallet.getWalletContext()])\nconst { options, quote } = await relayer.getFeeOptions(config[0], context, txn /* , txn2, txn3, etc... */)\n\n\n\n// Choose a fee from the list of options returned by the relayer\n// MATIC is native to Polygon and needs to be handled differently than other ERC-20 tokens like USDC\n\n// === vvv To pay the fee in native MATIC: vvv ===\nconst option = options.find(option => option.token.symbol === 'MATIC')\nif (!option) {\n  throw Error(`relayer doesn't support MATIC fees`)\n}\n\n// Craft the MATIC fee payment transaction\n// revertOnError: true is required for fee payments\nconst feeTxn = {\n  to: option.to,\n  value: option.value,\n  gasLimit: option.gasLimit,\n  revertOnError: true\n}\n// === ^^^ MATIC fee ^^^ ===\n\n\n\n// === vvv To pay the fee in USDC: vvv ===\nconst option = options.find(option => option.token.symbol === 'USDC')\nif (!option) {\n  throw Error(`relayer doesn't support USDC fees`)\n}\n\nconst erc20Interface = new ethers.utils.Interface([\n  'function transfer(address _to, uint256 _value)'\n])\n\n// Craft the USDC fee payment transaction\n// revertOnError: true is required for fee payments\nconst feeTxn = {\n  to: option.token.contractAddress,\n  gasLimit: option.gasLimit,\n  data: erc20Interface.encodeFunctionData('transfer', [option.to, option.value]),\n  revertOnError: true\n}\n// === ^^^ USDC fee ^^^ ===\n\n\n\n// Send your transaction with the fee and quote to the relayer for dispatch\nconst txnResponse = await wallet.sendTransaction([txn, feeTxn], undefined, undefined, quote)\n\n// Wait for transaction to be mined\nconst txnReceipt = await txnResponse.wait()\n\n// Check if transaction was successful \nif (txnReceipt.status != 1) {\n  console.log(`Unexpected status: ${txnReceipt.status}`)\n}\n\n")),(0,a.kt)("h2",{id:"nodejs-server-with-gas-sponsoring-using-sequence-builder"},"Nodejs Server with Gas Sponsoring using Sequence Builder"),(0,a.kt)("admonition",{title:"Need access to our Sequence Builder?",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Reach out to us by email @ ",(0,a.kt)("a",{parentName:"p",href:"mailto:hello@sequence.io"},"hello@sequence.io")," or complete our Sequence Pro form to hear back: ",(0,a.kt)("a",{parentName:"p",href:"https://pro.sequence.xyz/"},"https://pro.sequence.xyz/"),".")),(0,a.kt)("p",null,"If you want to have your transactions sponsored & paid for with a credit card, you can follow the below steps before beginning your code, at the following link: ",(0,a.kt)("a",{parentName:"p",href:"https://sequence.build/"},"https://sequence.build/")," "),(0,a.kt)("p",null,"By sponsoring your transaction, you can now just send the transaction without a fee object and not have to fund the smart contract wallet before relaying any transactions."),(0,a.kt)("admonition",{title:"Already Deployed Contract",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For this example, we assume you have a smart contract deployed with a contract address to include in the last step.")),(0,a.kt)("h3",{id:"a-create-dapp"},"A. Create Dapp"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Sequence builder create app",src:t(3666).Z,width:"1344",height:"495"})),(0,a.kt)("h3",{id:"b-new-dapp"},"B. New Dapp"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Sequence builder new dapp",src:t(6366).Z,width:"929",height:"690"})),(0,a.kt)("h3",{id:"c1-gas-tank"},"C.1 Gas Tank"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Sequence builder gas tank",src:t(8118).Z,width:"1544",height:"518"})),(0,a.kt)("h3",{id:"c2-add-gas"},"C.2 Add Gas"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Sequence builder add gas",src:t(354).Z,width:"1238",height:"763"})),(0,a.kt)("h3",{id:"c3-add-sponsored-address"},"C.3 Add Sponsored Address"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Sequence builder add sponsored address",src:t(374).Z,width:"1238",height:"755"})),(0,a.kt)("p",null,"The following is example code that implements a relayed transaction, same as the above example (i.e. Nodejs Server) but without fees, taken care of by the Sequence Builder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { RpcRelayer } from '@0xsequence/relayer'\nimport { Wallet } from '@0xsequence/wallet'\nimport { ethers } from 'ethers'\n\n// Get a provider\nconst provider = new ethers.providers.JsonRpcProvider('https://nodes.sequence.app/polygon')\n\n// Create your server EOA\nconst walletEOA = new ethers.Wallet(serverPrivateKey, provider)\n\n// Create your rpc relayer instance with relayer node you want to use\nconst relayer = new RpcRelayer({url: 'https://polygon-relayer.sequence.app', provider: provider})\n\n// Create your Sequence server wallet, controlled by your server EOA, and connect it to the relayer\nconst wallet = (await Wallet.singleOwner(walletEOA)).connect(provider, relayer)\n\n// Craft your transaction\nconst erc721Interface = new ethers.utils.Interface([\n  'function safeTransferFrom(address _from, address _to, uint256 _tokenId)'\n])\n\nconst data = erc721Interface.encodeFunctionData(\n  'safeTransferFrom', [senderAddress, recipientAddress, id]\n)\n\nconst txn = {\n  to: erc721TokenAddress,\n  data\n}\n\n// Send your transaction to the relayer for dispatch\nconst txnResponse = await wallet.sendTransaction([txn])\n\n// Wait for transaction to be mined\nconst txnReceipt = await txnResponse.wait()\n\n// Check if transaction was successful \nif (txnReceipt.status != 1) {\n  console.log(`Unexpected status: ${txnReceipt.status}`)\n}\n")),(0,a.kt)("h2",{id:"parallel-transactions"},"Parallel Transactions"),(0,a.kt)("p",null,"If you want to send multiple independent transactions without needing to batch them, you can also send them in distinct nonce spaces.\nUsing distinct nonce spaces for your transactions signals to the relayer that there's no dependency between them and that\nthey can be executed on-chain in any order."),(0,a.kt)("p",null,"This allows the transactions to be dispatched immediately in an unbuffered way without having to wait for a full batch.\nHere is an example of how to do that:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Import sequence nonce encoding function\nimport { encodeNonce } from '@0xsequence/transactions';\n\n// Generate random nonce spaces with ~0% probability of collision\nconst randomNonceSpace1 = ethers.BigNumber.from(ethers.utils.hexlify(ethers.utils.randomBytes(20)))\nconst randomNonceSpace2 = ethers.BigNumber.from(ethers.utils.hexlify(ethers.utils.randomBytes(20)))\n\n// Generate transactions\nconst txn1 = {\n  to: tokenContract.address,\n  data: erc20Interface.encodeFunctionData(\n    'transfer', [recipient1, amount1]\n  ),\n  nonce: encodeNonce(randomNonceSpace1, 0)\n}\n\nconst txn2 = {\n  to: tokenContract.address,\n  data: erc20Interface.encodeFunctionData(\n    'transfer', [recipient2, amount2]\n  ),\n  nonce: encodeNonce(randomNonceSpace2, 0)\n}\n\n// Dispatch transactions, which can now be executed in parallel\nconst txnResponse = await wallet.sendTransactionBatch([txn1, txn2])\n")),(0,a.kt)("p",null,"If batching transactions is not a problem for your use-case, you can call ",(0,a.kt)("inlineCode",{parentName:"p"},"await wallet.sendTransactionBatch(txns)"),".\nYou can read more about batch transactions in ",(0,a.kt)("a",{parentName:"p",href:"/wallet/guides/send-batch-transactions"},"Sending Batched Transactions"),"."))}u.isMDXComponent=!0},354:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/builder_add_gas-9fb8077270f7bdd3a697558287067c21.png"},374:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/builder_add_sponsored_address-2af5f409ed008fb9b595bdb5a57b87b4.png"},3666:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/builder_create_dapp-3fa3bd5fefdea0557229506da4b25e38.png"},8118:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/builder_gas_tank-9771dcf05b275102b0dd7d921e8c0365.png"},6366:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/builder_new_dapp-23c42a4f874bceec906e6aa7bca4b45b.png"}}]);