"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7618],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(t),f=a,m=p["".concat(i,".").concat(f)]||p[f]||u[f]||s;return t?r.createElement(m,o(o({ref:n},d),{},{components:t})):r.createElement(m,o({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=p;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<s;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4655:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={},o="Sending a Batch of Transactions",c={unversionedId:"wallet/send-batch-transactions",id:"wallet/send-batch-transactions",title:"Sending a Batch of Transactions",description:"Likewise, bundling multiple transactions to be send in a single native transaction is equally as easy:",source:"@site/docs/02-wallet/11-send-batch-transactions.mdx",sourceDirName:"02-wallet",slug:"/wallet/send-batch-transactions",permalink:"/wallet/send-batch-transactions",draft:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/02-wallet/11-send-batch-transactions.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"sidebar",previous:{title:"Sending ERC-1155 (Collectible) Tokens",permalink:"/wallet/send-erc1155"},next:{title:"Building Backends with Sequence",permalink:"/wallet/building-backends"}},i={},l=[],d={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sending-a-batch-of-transactions"},"Sending a Batch of Transactions"),(0,a.kt)("p",null,"Likewise, bundling multiple transactions to be send in a single native transaction is equally as easy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const transaction1 = {\n  to: recipient1Address,\n  value: 1000000000000000000\n}\n\nconst transaction2 = {\n  to: recipient2Address,\n  value: 1000000000000000000\n}\n\nconst signer = wallet.getSigner()\nconst response = await signer.sendTransactionBatch([transaction1, transaction2])\nconsole.log(response)\n")),(0,a.kt)("p",null,"The transactions don't have to be the same token or even token standard either.\nYou can mix and match:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const erc20Interface = new ethers.utils.Interface([\n  'function transfer(address _to, uint256 _value)'\n])\nconst erc721Interface = new ethers.utils.Interface([\n  'function safeTransferFrom(address _from, address _to, uint256 _tokenId)'\n])\nconst erc1155Interface = new ethers.utils.Interface([\n  'function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)'\n])\n\nconst erc20Data = erc20Interface.encodeFunctionData(\n  'transfer', [recipient2Address, amount2]\n)\nconst erc721Data = erc721Interface.encodeFunctionData(\n  'safeTransferFrom', [address, recipient3Address, amount3]\n)\nconst erc1155Data = erc1155Interface.encodeFunctionData(\n  'safeTransferFrom', [address, recipient4Address, token4Id, amount4, '0x']\n)\n\nconst transactions = [\n  { to: recipient1Address, value: '1000000000000000000' },\n  { to: daiContractAddress, data: erc20Data },\n  { to: erc721ContractAddress, data: erc721Data },\n  { to: erc1155ContractAddress, data: erc1155Data }\n]\n\nconst signer = wallet.getSigner()\nconst response = await signer.sendTransactionBatch(transactions)\nconsole.log(response)\n")))}u.isMDXComponent=!0}}]);