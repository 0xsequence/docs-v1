"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3262],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8646:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_label:"Using Wagmi"},i="Using Wagmi",l={unversionedId:"wallet/guides/connectors/wagmi",id:"wallet/guides/connectors/wagmi",title:"Using Wagmi",description:"The Sequence wallet used with Wagmi through the connector.",source:"@site/docs/03-wallet/20-guides/14-connectors/1-wagmi.mdx",sourceDirName:"03-wallet/20-guides/14-connectors",slug:"/wallet/guides/connectors/wagmi",permalink:"/wallet/guides/connectors/wagmi",draft:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/03-wallet/20-guides/14-connectors/1-wagmi.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Using Wagmi"},sidebar:"sidebar",previous:{title:"Using Sequence on testnets",permalink:"/wallet/guides/using-testnets"},next:{title:"Using RainbowKit",permalink:"/wallet/guides/connectors/rainbow-kit"}},c={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"chains",id:"chains",level:3},{value:"options.connect (optional)",id:"optionsconnect-optional",level:3},{value:"Example",id:"example",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-wagmi"},"Using Wagmi"),(0,r.kt)("p",null,"The Sequence wallet used with Wagmi through the connector."),(0,r.kt)("admonition",{title:"Try it live :)",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Try ",(0,r.kt)("a",{parentName:"p",href:"https://0xsequence.github.io/demo-dapp-wagmi/"},"a live Dapp example")," using Sequence + Metamask + Wallet Connect with wagmi."),(0,r.kt)("p",{parentName:"admonition"},"Source code is available too: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/0xsequence/demo-dapp-wagmi"},"https://github.com/0xsequence/demo-dapp-wagmi"))),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"The connector is installed via the npm package ",(0,r.kt)("inlineCode",{parentName:"p"},"@0xsequence/wagmi-connector"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @0xsequence/wagmi-connector\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @0xsequence/wagmi-connector\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The connector is then imported and added to the list of connectors alongside the other wagmi connectors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { SequenceConnector } from '@0xsequence/wagmi-connector'\n\n  const connectors = [\n    new SequenceConnector({\n      chains,\n      options: {\n        connect: {\n          app: 'Demo-app',\n          networkId: 137\n        }\n      }\n    }),\n    ...otherConnectors\n  ]\n  \n  const wagmiClient = createClient({\n    autoConnect: false,\n    connectors,\n    provider\n  })\n")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("h3",{id:"chains"},"chains"),(0,r.kt)("p",null,"Chains supported by app. This is the same parameter as would be passed to other RainbowKit wallets."),(0,r.kt)("h3",{id:"optionsconnect-optional"},"options.connect (optional)"),(0,r.kt)("p",null,"Connection details that will be passed to Sequence upon connection, including app name, network id, etc..."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"A demo app for Wagmi is available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/0xsequence/demo-dapp-wagmi"},"here")))}u.isMDXComponent=!0}}]);