"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[4355],{9899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var a=n(1527),i=n(7279);const s={slug:"/guides/manage-contract-metadata-builder"},o="How to Manage Item Metadata in Sequence Builder",d={id:"guides/manage-contract-metadata-builder",title:"How to Manage Item Metadata in Sequence Builder",description:"Introduction",source:"@site/docs/075-guides/800-manage-contract-metadata-builder.mdx",sourceDirName:"075-guides",slug:"/guides/manage-contract-metadata-builder",permalink:"/guides/manage-contract-metadata-builder",draft:!1,unlisted:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/075-guides/800-manage-contract-metadata-builder.mdx",tags:[],version:"current",sidebarPosition:800,frontMatter:{slug:"/guides/manage-contract-metadata-builder"},sidebar:"sidebar",previous:{title:"How to Refill the Gas Tank in Builder",permalink:"/guides/refill-gas-tank"},next:{title:"How to Mint In-Game Items and Achievements in Builder",permalink:"/guides/mint-items-from-ERC1155"}},r={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Step 1: Prepare Your Token Images and Metadata",id:"step-1-prepare-your-token-images-and-metadata",level:2},{value:"Step 2: Set Up on Pinata.cloud",id:"step-2-set-up-on-pinatacloud",level:2},{value:"Step 3: Upload Your Metadata Files",id:"step-3-upload-your-metadata-files",level:2},{value:"Step 4: Get the Folder URL",id:"step-4-get-the-folder-url",level:2},{value:"Step 5: Set Up on Sequence Builder",id:"step-5-set-up-on-sequence-builder",level:2},{value:"Step 6: Deploy Your Contract",id:"step-6-deploy-your-contract",level:2},{value:"Step 7: Move to Contract Details",id:"step-7-move-to-contract-details",level:2},{value:"Step 8: Update Contract Attributes",id:"step-8-update-contract-attributes",level:2},{value:"Step 9: Set the Base Metadata URI",id:"step-9-set-the-base-metadata-uri",level:2},{value:"Step 10: Minting Time",id:"step-10-minting-time",level:2},{value:"Step 11: Finalize and Admire",id:"step-11-finalize-and-admire",level:2},{value:"Step 12: Updating Metadata",id:"step-12-updating-metadata",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"how-to-manage-item-metadata-in-sequence-builder",children:"How to Manage Item Metadata in Sequence Builder"}),"\n",(0,a.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(t.p,{children:["Following this guide, you can easily manage token metadata for your contract items in Sequence Builder, with a little help from ",(0,a.jsx)(t.a,{href:"https://www.pinata.cloud/",children:"Pinata"})," for IPFS hosting."]}),"\n",(0,a.jsx)(t.h2,{id:"step-1-prepare-your-token-images-and-metadata",children:"Step 1: Prepare Your Token Images and Metadata"}),"\n",(0,a.jsxs)(t.p,{children:["First things first, gather all your token images. For each token, you'll need a metadata file named ",(0,a.jsx)(t.code,{children:"id.json"})," (like ",(0,a.jsx)(t.code,{children:"1.json"}),", ",(0,a.jsx)(t.code,{children:"2.json"}),", etc.). These files should look something like this at a minimum:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'{\n    "name": "Token Name",\n    "description": "Token Description",\n    "image": "ipfs://"\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"As you can guess, you can build from these basics. You could have your unique item attributes embedded in this token and generated on the fly."}),"\n",(0,a.jsx)(t.h2,{id:"step-2-set-up-on-pinatacloud",children:"Step 2: Set Up on Pinata.cloud"}),"\n",(0,a.jsxs)(t.p,{children:["Head over to ",(0,a.jsx)(t.a,{href:"https://www.pinata.cloud/",children:"Pinata.cloud"})," and create an account. Upload each of your token images as separate files. Next, update the metadata JSON files with the ",(0,a.jsx)(t.code,{children:"ipfs"})," address for each token. To do this, simply copy the CID (Content Identifier) for each file from Pinata and paste it after ",(0,a.jsx)(t.code,{children:"ipfs://"})," in your JSON files. It should look like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'{\n    "name": "Token Name",\n    "description": "Token Description",\n    "image": "ipfs://QmdJzQExj2wnNY7pNNn4KauzckjH4vA5xhoxmmis919Ev3"\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Configure Pinata",src:n(7427).Z+"",width:"1400",height:"981"})}),"\n",(0,a.jsx)(t.h2,{id:"step-3-upload-your-metadata-files",children:"Step 3: Upload Your Metadata Files"}),"\n",(0,a.jsx)(t.p,{children:"Now, gather all your JSON metadata files into a single folder on your computer. Use Pinata's 'Upload > Folder' feature to upload this folder. Then, copy the CID for the entire folder."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Upload Metadata",src:n(8728).Z+"",width:"1400",height:"1036"})}),"\n",(0,a.jsx)(t.h2,{id:"step-4-get-the-folder-url",children:"Step 4: Get the Folder URL"}),"\n",(0,a.jsx)(t.p,{children:"Click on name of the folder you created on Pinata. This will open a new tab showing all your uploaded JSON files. Copy the URL of this folder."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Get Folder URL from Pinata",src:n(5036).Z+"",width:"2258",height:"1286"})}),"\n",(0,a.jsx)(t.h2,{id:"step-5-set-up-on-sequence-builder",children:"Step 5: Set Up on Sequence Builder"}),"\n",(0,a.jsxs)(t.p,{children:["Navigate to ",(0,a.jsx)(t.a,{href:"https://sequence.build/",children:"Sequence Builder"}),', set up your account, and create your project on the network of your choice. In the Contracts section, click on "Deploy New Contract".']}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Configure Contract on Builder",src:n(3542).Z+"",width:"1400",height:"699"})}),"\n",(0,a.jsx)(t.h2,{id:"step-6-deploy-your-contract",children:"Step 6: Deploy Your Contract"}),"\n",(0,a.jsx)(t.p,{children:'Select "Web3 Game Item Collection (ERC-1155)" and name your contract. Sequence Builder will automatically deploy your contract on-chain.'}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Deploy Contract",src:n(8456).Z+"",width:"1400",height:"1098"})}),"\n",(0,a.jsx)(t.h2,{id:"step-7-move-to-contract-details",children:"Step 7: Move to Contract Details"}),"\n",(0,a.jsx)(t.p,{children:"Once you sign the transaction, your contract is ready! Click on it to view the details screen."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Contract Details",src:n(8217).Z+"",width:"1400",height:"641"})}),"\n",(0,a.jsx)(t.h2,{id:"step-8-update-contract-attributes",children:"Step 8: Update Contract Attributes"}),"\n",(0,a.jsx)(t.p,{children:"Navigate to the \u201cWrite Contract\u201d section. This is where you can modify attributes of your freshly deployed ERC-1155 contract. Two methods are what you should focus on for now:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"setBaseMetadataURI"})," allows the creator to set the base metadata URL for this contract. You want this to point to the JSON files you\u2019ve created, depending on NFT ID."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"mint"})," mints one of your tokens and sends it to an address of your choosing."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"step-9-set-the-base-metadata-uri",children:"Step 9: Set the Base Metadata URI"}),"\n",(0,a.jsxs)(t.p,{children:["Scroll to ",(0,a.jsx)(t.code,{children:"setBaseMetadataURI"}),", expand it, and under ",(0,a.jsx)(t.code,{children:"tokenBaseURI"})," paste the URL for the JSON folder preview you got from Pinata earlier. It should look something like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"https://azure-wooden-lemur-911.mypinata.cloud/ipfs/QmW5gvYGWb98GsN8VjTRWu4pLn6jryEXNxZKNWpPhVwtDm/\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Click \u201cWrite\u201d and you will be prompted to sign again. This will modify the contract on chain to set the metadata base. Essentially any token ID you provide will be appended to this URL, along with the ",(0,a.jsx)(t.code,{children:".json"})," suffix. So if you mint token ID 123, it will look for ",(0,a.jsx)(t.code,{children:"tokenBaseURI + 123.json"}),"."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Base Metadata Setup",src:n(491).Z+"",width:"1400",height:"1074"})}),"\n",(0,a.jsx)(t.h2,{id:"step-10-minting-time",children:"Step 10: Minting Time"}),"\n",(0,a.jsxs)(t.p,{children:["Finally, it\u2019s time to mint! Scroll up to ",(0,a.jsx)(t.code,{children:"mint"}),", expand it, and fill in the details:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"to (address)"}),": This is the address that the token will be sent to. Use your Sequence wallet address or any other valid address."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"tokenId (uint256)"}),": This is your token ID. As long as you have a ",(0,a.jsx)(t.code,{children:"tokenId.json"})," file already uploaded to pinata.cloud under the folder, it will work."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"amount (uint256)"}),": The number of tokens to mint (usually 1)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"data (bytes)"}),": Enter ",(0,a.jsx)(t.code,{children:"0x00"})," for this simple process."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Mint test",src:n(6333).Z+"",width:"1400",height:"1091"})}),"\n",(0,a.jsx)(t.h2,{id:"step-11-finalize-and-admire",children:"Step 11: Finalize and Admire"}),"\n",(0,a.jsx)(t.p,{children:'Click "Write" and sign the transaction. Congratulations, you\'ve just minted a token! Head over to the "Tokens" section to see your minted tokens with their names and images.'}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Finalize Minting",src:n(6208).Z+"",width:"1400",height:"1036"})}),"\n",(0,a.jsx)(t.h2,{id:"step-12-updating-metadata",children:"Step 12: Updating Metadata"}),"\n",(0,a.jsx)(t.p,{children:"If you make mistakes with the token metadata, you can always update it and then call the Sequence Metadata refresh endpoint to reload the specific tokens:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'curl -X GET "https://metadata.sequence.app/tokens/mumbai/0xb392c99d9f8e3e0b248e5c283818be5bf5cecca7/1/refresh"\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This is in the format: ",(0,a.jsx)(t.code,{children:"https://dev-metadata.sequence.app/tokens/<chain-name>/<contract-address>/<token-id>/refresh"})]}),"\n",(0,a.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(t.p,{children:"You've successfully minted your own ERC1155 game tokens using Sequence Builder."})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},7427:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/1-11aa3beed631f5cbd005bdb2ea483f12.jpeg"},8728:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/2-9bf5da3d1bd3b19e0434e8fb10495c5e.jpeg"},5036:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/3-41c7c788dc2cd4c199429416994d28fd.jpeg"},3542:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/4-7b6ec512cbb8bd99013f7494f5347de8.jpeg"},8456:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/5-37b44e5d9e198e9a2cc21f4966b69459.jpeg"},8217:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/6-ff7c75619d60be3dc1342cb295fe6d1f.jpeg"},491:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/7-aa17b9ce8c783c465e7dc676929a1492.jpeg"},6333:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/8-918ee569de6d86b3f54ccfcc277ba2f6.jpeg"},6208:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/9-b003acb228a71facb308fbf8c037b6ac.jpeg"},7279:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>o});var a=n(959);const i={},s=a.createContext(i);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);