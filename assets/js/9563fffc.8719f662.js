"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[9312],{6753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var i=n(1527),s=n(7279);const a={},r="Advanced - Introduction",o={id:"unity-waas-sdk/Advanced/introduction",title:"Advanced - Introduction",description:"For advanced users with experience developing applications on EVM-based blockchains, we've provided our own lightweight, custom-made for Unity, Ethereum library: SequenceEthereum.",source:"@site/docs/120-unity-waas-sdk/Advanced/01-introduction.mdx",sourceDirName:"120-unity-waas-sdk/Advanced",slug:"/unity-waas-sdk/Advanced/introduction",permalink:"/unity-waas-sdk/Advanced/introduction",draft:!1,unlisted:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/120-unity-waas-sdk/Advanced/01-introduction.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"sidebar",previous:{title:"Wallet UI",permalink:"/unity-waas-sdk/wallet-ui"},next:{title:"Wallets",permalink:"/unity-waas-sdk/Advanced/wallets"}},c={},d=[{value:"Important Components",id:"important-components",level:2},{value:"Client",id:"client",level:3},{value:"Wallet",id:"wallet",level:3},{value:"Transaction",id:"transaction",level:3},{value:"Contract",id:"contract",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"advanced---introduction",children:"Advanced - Introduction"}),"\n",(0,i.jsxs)(t.p,{children:["For advanced users with experience developing applications on EVM-based blockchains, we've provided our own lightweight, custom-made for Unity, Ethereum library: ",(0,i.jsx)(t.a,{href:"https://github.com/0xsequence/sequence-unity/tree/master/Assets/SequenceSDK/Ethereum",children:"SequenceEthereum"}),".\nSequenceEthereum should provide everything you need to build your Unity app on the EVM, without all the extra bells and whistles that the popular ",(0,i.jsx)(t.a,{href:"https://github.com/Nethereum/Nethereum",children:"Nethereum"})," library provides."]}),"\n",(0,i.jsxs)(t.p,{children:['While SequenceEthereum is heavily tested, in general, when working with asynchronous methods in the library, you should consider them to be "unsafe", in that they ',(0,i.jsx)("i",{children:"may"})," throw Exceptions when used improperly.\nIn general, wrapping async calls that can potentially throw Exceptions in try catch blocks is a best practice; particularly in Unity, where ",(0,i.jsx)(t.code,{children:"Tasks"})," can fail silently when throwing exceptions - making debugging difficult when not wrapping calls in try catch blocks."]}),"\n",(0,i.jsx)(t.h2,{id:"important-components",children:"Important Components"}),"\n",(0,i.jsx)(t.p,{children:'When working with the SequenceEthereum library it can be helpful to understand some of the main "components" and how they logically fit together.'}),"\n",(0,i.jsx)(t.h3,{id:"client",children:(0,i.jsx)(t.a,{href:"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Provider/IEthClient.cs",children:"Client"})}),"\n",(0,i.jsx)(t.p,{children:"Clients handle the connection to blockchain networks, making various RPC requests. Any time you wish to query the blockchain or submit a transaction, you will need a client. As a rule of thumb, if a method requires a client, you should expect that you will be making a web request and will need to work with async tasks and be prepared to catch any exceptions that are thrown."}),"\n",(0,i.jsx)(t.h3,{id:"wallet",children:(0,i.jsx)(t.a,{href:"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Wallet/IWallet.cs",children:"Wallet"})}),"\n",(0,i.jsx)(t.p,{children:"A wallet keeps track of its own private/public key pair and address and is responsible for providing its private key to the signer when signing transactions."}),"\n",(0,i.jsx)(t.h3,{id:"transaction",children:(0,i.jsx)(t.a,{href:"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Transaction/EthTransaction.cs",children:"Transaction"})}),"\n",(0,i.jsxs)(t.p,{children:["A transaction, as implemented in ",(0,i.jsx)(t.code,{children:"EthTransaction"}),", contains all the data and parameters for an EVM transaction. The object is used for initiating its ",(0,i.jsx)(t.a,{href:"https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/",children:"RLP encoding"})," (transactions must be signed and RLP encoded when submitted)."]}),"\n",(0,i.jsxs)(t.p,{children:["Note that all transactions are encoded with a chain id included to protect against replay attacks, see ",(0,i.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-155",children:"EIP-155"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"contract",children:(0,i.jsx)(t.a,{href:"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Contract/Contract.cs",children:"Contract"})}),"\n",(0,i.jsx)(t.p,{children:"A contract is responsible for creating transactions (for method calls) and messages (for queries) agaisnt it. These transactions are later signed by the wallet and submitted (along with query messages) using a client."})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},7279:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>r});var i=n(959);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);