"use strict";(self.webpackChunk_0xsequence_docs=self.webpackChunk_0xsequence_docs||[]).push([[7829],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),g=r,m=p["".concat(o,".").concat(g)]||p[g]||d[g]||s;return t?a.createElement(m,i(i({ref:n},u),{},{components:t})):a.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=g;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(7294),r=t(6010);const s="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,i),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>g});var a=t(7462),r=t(7294),s=t(6010),i=t(2389),l=t(7392),o=t(7094),c=t(2466);const u="tabList__CuJ",p="tabItem_LNqP";function d(e){const{lazy:n,block:t,defaultValue:i,values:d,groupId:g,className:m}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=d??b.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),f=(0,l.l)(y,((e,n)=>e.value===n.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===i?i:i??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==h&&!y.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:C}=(0,o.U)(),[k,w]=(0,r.useState)(h),N=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=g){const e=v[g];null!=e&&e!==k&&y.some((n=>n.value===e))&&w(e)}const E=e=>{const n=e.currentTarget,t=N.indexOf(n),a=y[t].value;a!==k&&(T(n),w(a),null!=g&&C(g,String(a)))},S=e=>{let n=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},m)},y.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:e=>N.push(e),onKeyDown:S,onClick:E},i,{className:(0,s.Z)("tabs__item",p,i?.className,{"tabs__item--active":k===n})}),t??n)}))),n?(0,r.cloneElement)(b.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==k})))))}function g(e){const n=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(n)},e))}},2643:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));t(5488),t(5162);const s={},i="Signing & Verifying Messages",l={unversionedId:"unity-sdk/wallet/sign-message",id:"unity-sdk/wallet/sign-message",title:"Signing & Verifying Messages",description:"Prerequisites",source:"@site/docs/09-unity-sdk/23-wallet/07-sign-message.mdx",sourceDirName:"09-unity-sdk/23-wallet",slug:"/unity-sdk/wallet/sign-message",permalink:"/unity-sdk/wallet/sign-message",draft:!1,editUrl:"https://github.com/0xsequence/docs/edit/master/docs/09-unity-sdk/23-wallet/07-sign-message.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"sidebar",previous:{title:"Nethereum",permalink:"/unity-sdk/wallet/nethereum"},next:{title:"Sending Transactions",permalink:"/unity-sdk/wallet/send-transaction"}},o={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Signing Messages",id:"signing-messages",level:2},{value:"Verifying Message Signatures",id:"verifying-message-signatures",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"signing--verifying-messages"},"Signing & Verifying Messages"),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Make sure you have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Web3")," instance with the ",(0,r.kt)("inlineCode",{parentName:"p"},"SequenceInterceptor")," configured, as documented in ",(0,r.kt)("a",{parentName:"p",href:"./nethereum"},"the Nethereum section"),"."),(0,r.kt)("h2",{id:"signing-messages"},"Signing Messages"),(0,r.kt)("p",null,"Sequence wallets are able to easily sign arbitrary messages using Nethereum."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"To request a user's signature of a simple message:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var address = await web3.GetAddress();\nvar message = "Hello, world!";\nvar signature = await web3.Eth.Sign.SendRequestAsync(address, message);\nDebug.Log(signature);\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"To request a user's signature of a typed-data (",(0,r.kt)("a",{parentName:"strong",href:"https://eips.ethereum.org/EIPS/eip-712"},"EIP712"),") message:")),(0,r.kt)("p",null,"You can either use a typed ABI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var chainId = await web3.Eth.ChainId.SendRequestAsync()\nvar data = new TypedData<Domain>\n{\n    Domain = new Domain\n    {\n        Name = "Test Name",\n        Version = "1",\n        ChainId = chainId,\n        VerifyingContract = "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"\n    },\n    Types = MemberDescriptionFactory.GetTypesMemberDescription(typeof(Domain)),\n    PrimaryType = nameof(Domain),\n};\nvar signature = await web3.Eth.AccountSigning.SignTypedDataV4.SendRequestAsync(data.ToJson());\nDebug.Log("Typed Data Signature: " + signature);\n')),(0,r.kt)("p",null,"or a raw JSON string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var chainId = await web3.Eth.ChainId.SendRequestAsync()\nvar data = @"\n{\n    ""domain"": {\n      ""name"": ""Ether Mail"",\n      ""version"": ""1"",\n      ""chainId"": " + chainId + @",\n      ""verifyingContract"": ""0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC""\n    },\n    ""types"": {\n      ""Person"": [\n        { ""name"": ""name"", ""type"": ""string"" },\n        { ""name"": ""wallet"", ""type"": ""address"" }\n      ]\n    },\n    ""message"": {\n      ""name"": ""Bob"",\n      ""wallet"": ""0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB""\n    }\n}\n";\nvar signature = await web3.Eth.AccountSigning.SignTypedDataV4.SendRequestAsync(data.ToJson());\nDebug.Log("Typed Data Signature: " + signature);\n')),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"verifying-message-signatures"},"Verifying Message Signatures"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000/wallet/guides/sign-message"},"the sequence.js docs"),"."))}p.isMDXComponent=!0}}]);