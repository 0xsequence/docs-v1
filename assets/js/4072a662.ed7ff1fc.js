"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[814],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),h=a,f=p["".concat(c,".").concat(h)]||p[h]||d[h]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9460:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=t(3117),a=t(102),i=(t(7294),t(3905)),o=["components"],s={},c="Building Relaying Server with Sequence",l={unversionedId:"build-with-sequence/building-relaying-server",id:"build-with-sequence/building-relaying-server",title:"Building Relaying Server with Sequence",description:"With Sequence, you can create a smart contract wallet your server can use to dispatch transactions for your users without you having to be worried about transaction speed, throughput and re-orgs.",source:"@site/docs/build-with-sequence/12-building-relaying-server.mdx",sourceDirName:"build-with-sequence",slug:"/build-with-sequence/building-relaying-server",permalink:"/build-with-sequence/building-relaying-server",editUrl:"https://github.com/0xsequence/docs/edit/master/docs/build-with-sequence/12-building-relaying-server.mdx",tags:[],version:"current",sidebarPosition:12,frontMatter:{},sidebar:"sidebar",previous:{title:"Building Backends with Sequence",permalink:"/build-with-sequence/building-backends"},next:{title:"Using Sequence on testnets",permalink:"/build-with-sequence/using-testnets"}},u=[{value:"Nodejs Server",id:"nodejs-server",children:[],level:3}],d={toc:u};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"building-relaying-server-with-sequence"},"Building Relaying Server with Sequence"),(0,i.kt)("p",null,"With Sequence, you can create a smart contract wallet your server can use to dispatch transactions for your users without you having to be worried about transaction speed, throughput and re-orgs."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Parallel Transactions")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"By default, Sequence transactions will be executable in parallel. "))),(0,i.kt)("h3",{id:"nodejs-server"},"Nodejs Server"),(0,i.kt)("p",null,"Your server will need an EOA wallet that will be able to sign messages. It will be the owner of your server side Sequence wallet which will be used to dispatch transactions.\nThis Sequence wallet should have the correct ownership at your contract level, not the EOA."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { RpcRelayer } from '@0xsequence/relayer'\nimport { Wallet } from '@0xsequence/wallet'\nimport { ethers } from 'ethers'\n\n// Create your server EOA\nconst wallet_EOA = new ethers.Wallet(serverPrivateKey, provider)\n\n// Create your rpc relayer instance with relayer node you want to use\nconst relayer = new RpcRelayer({url: 'https://polygon-relayer.sequence.app'})\n\n// Create your Sequence server wallet, controlled by your server EOA, and connect it to the relayer\nconst wallet = (await Wallet.singleOwner(serverPrivateKey)).connect(provider, relayer)\n\n// Craft your transaction\nconst erc721Interface = new ethers.utils.Interface([\n  'function safeTransferFrom(address _from, address _to, uint256 _tokenId)'\n])\n\nconst txn = erc721Interface.encodeFunctionData(\n  'safeTransferFrom', [senderAddress, recipientAddress, id]\n)\n\n// Send your transaction, which will be relayed by relayer\nconst txnResponse = await wallet.sendTransaction(txn)\n\n// Wait for transaction to be mined\nconst txnReceipt = await txnResponse.wait()\n\n// Check if transaction was successful \nif (txnReceipt.status != 1) {\n  console.log(`Unexpected status: ${txnReceipt.status}`)\n}\n\n")),(0,i.kt)("p",null,"You can also send transactions in batches using ",(0,i.kt)("inlineCode",{parentName:"p"},"await wallet.sendTransactionBatch(txns)"),". You can read more about batch transactions in ",(0,i.kt)("a",{parentName:"p",href:"/build-with-sequence/send-batch-transactions"},"Sending Batched Transactions"),"."))}p.isMDXComponent=!0}}]);